Create a single linked list with data elements key & data and define following functions:
a) Traverse each node of the list

#include<iostream>
using namespace std;
class ListNode
{
    public:
    int val;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    tail=newNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Here no linked list is present firstly make linked list"<<endl;
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}

int main()
{
    int n,v;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of first node ";
    while(n--)
    { 
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"The values in the linked list is "<<endl;
    print(head);
}

output

Enter the length of LinkedList 
5
Enter the value of first node
1

2

3

4

5

The values in the linked list is
1 2 3 4 5

b) Insert a node at first, last, and middle position

#include<iostream>
using namespace std;
class ListNode
{
    public:
    int val;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
};
void InsertAtHead(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* newNode=new ListNode(val);
    newNode->next=head;
    head=newNode;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    tail=newNode;
}
int FindLength(ListNode* head)
{
    ListNode* temp=head;
    int s=1;
    while(temp->next!=NULL)
    {
        temp=temp->next;
        s++;
    }
    return s;
}
ListNode* findMiddle(ListNode* head)
{
    ListNode* slow=head;
    ListNode* fast=head;
    while(fast->next!=NULL)
    {
        fast=fast->next;
        if(fast->next!=NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }
    }
    return slow;
}
void InsertAtMiddle(ListNode* &head,ListNode* & tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* middle=findMiddle(head);
    ListNode* newNode=new ListNode(val);
    newNode->next=middle->next;
    middle->next=newNode;
}
void print(ListNode* &head)
{
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of nodes ";
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    int switchval;
    cout<<"Enter 1 if you want to insert node at the head "<<endl;
    cout<<"Enter 2 if you want to insert node at the tail "<<endl;
    cout<<"Enter 3 if you want to insert node at the middle "<<endl;
    cin>>switchval;
    switch(switchval)
    {
    case 1:
    cout<<"Enter the val of node ";
    cin>>v;
    InsertAtHead(head,tail,v);
    break;
    case 2:
    cout<<"Enter the val of node ";
    cin>>v;
    InsertAtTail(head,tail,v);
    break;
    case 3:
    cout<<"Enter the val of node ";
    cin>>v;
    InsertAtMiddle(head,tail,v);
    break;
    }
    print(head);
}

output

Enter the length of LinkedList 
5
Enter the value of first node
1
2
3
4
5
Enter 1 if you want to insert node at the head
Enter 2 if you want to insert node at the tail
Enter 3 if you want to insert node at the middle
3
Enter the val of node 100
1 2 3 100 4 5

c) Delete a node at first, last, middle position

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
    ~ListNode()
    {
        int val=this->val;
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
    }
};
int FindLength(ListNode* &head)
{
    ListNode* temp=head;
    int len=1;
    while(temp->next!=NULL)
    {
        len++;
        temp=temp->next;
    }
    return len;
}
void deleteHead(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"There is no ListNode here to delete here id NULL"<<endl;
        return;
    }
    ListNode* temp=head;
    head=temp->next;
    temp->next=NULL;
    delete temp;
}
void deleteTail(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"There is no ListNode here to delete here id NULL"<<endl;
        return;
    }
    ListNode* temp=head;
    int len=FindLength(head);
    int i=1;
    while(i<len-1)
    {
        temp=temp->next;
        i++;
    }
    temp->next=NULL;
    delete tail;
    tail=temp;
}
ListNode* findMiddle(ListNode* head)
{
    ListNode* slow=head;
    ListNode* fast=head->next;
    while(fast->next!=NULL)
    {
        fast=fast->next;
        if(fast->next!=NULL)
        {
            fast=fast->next;
            slow=slow->next;
        }
    }
    return slow;
}
void deleteMiddle(ListNode* &head)
{
    if(head==NULL)
    {
        cout<<"There is no node present here "<<endl;
        return;
    }
    ListNode* Middle=findMiddle(head);
    ListNode* temp=Middle->next;
    Middle->next=temp->next;
    temp->next=NULL;
    delete temp;
}

void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode=new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    tail=newListNode;
}
void print(ListNode*  &head)
{
    if(head==NULL)
    {
        cout<<"linked list is empty firtly insert node "<<endl;
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of nodes ";
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    int switchval;
    cout<<"Enter 1 if you want to delete node at the head "<<endl;
    cout<<"Enter 2 if you want to delete node at the tail "<<endl;
    cout<<"Enter 3 if you want to delete node at the middle "<<endl;
    cin>>switchval;
    switch(switchval)
    {
    case 1:
    deleteHead(head,tail);
    break;
    case 2:
    deleteTail(head,tail);
    break;
    case 3:
    deleteMiddle(head);
    break;
    }
    cout<<"After deletion linked list is"<<endl;
    print(head);
    return 0;
}

output

Enter the length of LinkedList 
8
Enter the value of first node
1
2
3
4
5
6
7
8
Enter 1 if you want to delete node at the head
Enter 2 if you want to delete node at the tail
Enter 3 if you want to delete node at the middle
3
After deletion linked list is
1 2 3 4 6 7 8

d) Sort the list

#include<iostream>
using namespace std;
class ListNode
{
    public:
    int val;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
    ~ListNode()
    {
        delete next;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newHead=new ListNode(val);
        head=newHead;
        tail=newHead;
        return;
    }
    ListNode* newHead=new ListNode(val);
    tail->next=newHead;
    tail=newHead;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"linked list is empty there is no node present here firstly make node ";
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
ListNode* sortlinkedlist(ListNode* &head)
{
    ListNode* newHead=head;
    ListNode* newTail=head;
    head=head->next;
    newTail->next=NULL;
    ListNode* temp=head;
    while(temp!=NULL)
    {
        if(temp->val<=newHead->val)
        {
            head=head->next;
            temp->next=NULL;
            temp->next=newHead;
            newHead=temp;
            temp=head;
            continue;
        }
        if(temp->val>=newTail->val)
        {
            head=head->next;
            temp->next=NULL;
            newTail->next=temp;
            newTail=temp;
            temp=head;
            continue;
        }
        if(temp->val>newHead->val&&temp->val<newTail->val)
        {
            ListNode* temp1=newHead;
            head=head->next;
            temp->next=NULL;
            while(temp1->next->val<temp->val)
            {
                temp1=temp1->next;
            }
            temp->next=temp1->next;
            temp1->next=temp;
            temp=head;
        }
    }
    return newHead;
}
int main()
{
    int l,v;
    cout<<"Enter  the length of linkedlist ";
    cin>>l;
    if(l==0)
    {
        cout<<"Firstly insert the node ";
        return 0;
    }
    cout<<endl;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of nodes "<<endl;
    while(l--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"Entered linked list is "<<endl;
    print(head);
    ListNode* newHead=sortlinkedlist(head);
    cout<<endl<<"Linked list after sort list "<<endl;
    print(newHead);
}

output
Enter  the length of linkedlist 10
Enter the value of the node
2
4
5
67
8
5
1
2
3
Linked list after sort list 
1 2 2 3 4 5 5 6 7 8

e) Reverse the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    tail=newNode;
}
ListNode* ReverseUsingRecursion(ListNode* &prev,ListNode* &curr)
{
    if(curr==NULL)
    {
        return prev;
    }
    ListNode* Forward=curr->next;
    curr->next=prev;
    return ReverseUsingRecursion(curr,Forward);
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"linked list is empty firstly insert node"<<endl;
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
   int n,v;
    cout<<"Enter the length of LinkedList "<<endl;
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    if(n==0)
    {
        cout<<"Firstly insert nodes ";
        return 0;
    }
    cout<<"Enter the value of first node "<<endl;
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    ListNode* prev=NULL;
    ListNode* curr=head;
    ListNode* newhead=ReverseUsingRecursion(prev,curr);
    cout<<endl<<"Linked list after reverse "<<endl;
    print(newhead);
}


output

Enter the length of LinkedList 
5
Enter the value of first node 
1
2
3
4
5
Linked list after reverse
5 4 3 2 1
