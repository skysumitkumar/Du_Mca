1. Create C++ programming for double linked list with data elements key

a) Traverse forward

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"There is no element in the linked list ";
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of first node ";
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"print the forward traverse "<<endl;
    print(head);
}

output

Enter the length of LinkedList 
5
Enter the value of first node
1
2
3
4
5
print the forward traverse 
1 2 3 4 5

b) Traverse backward

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void print(ListNode* tail)
{
    if(tail==NULL)
    {
        cout<<"There is no element in the linked list";
        return ;
    }
    ListNode* temp=tail;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->prev;
    }
}
int main()
{
    int n,v;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of first node ";
    while(n--)
    {
        
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"print the forward traverse "<<endl;
    print(tail);
}


output

Enter the length of LinkedList 
5
Enter the value of first node
1
2
3
4
5
print the forward traverse 
5 4 3 2 1

c) Insertion of a node at the last position

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"linked list is empty firstly insert a node "<<endl;
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of nodes ";
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"Enter the value of node that you want to insert at last ";
    cin>>v;
    InsertAtTail(head,tail,v);
    cout<<endl;
    cout<<"After insertion node at the last positon "<<endl;
    print(head);
}

output

Enter the length of LinkedList 
5
Enter the value of first nodes
1
2
3
4
5
Enter the value of node that you want to insert at last 100   

After insertion node at the last positon
1 2 3 4 5 100

d) Insertion of a node after kth position

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
int findLength(ListNode* &head)
{
    ListNode* temp=head;
    int i=0;
    while(temp!=NULL)
    {
        i++;
        temp=temp->next;
    }
    return i;
}
void InsertAtHead(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    newListNode->next=head;
    head->prev=newListNode;
    head=newListNode;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void InsertAtPosition(ListNode* &head,ListNode* &tail,int val,int k)
{
    if(head==NULL)
    {
        ListNode* newListNode=new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    ListNode* temp=head;
    if(k<=0)
    {
        InsertAtHead(head,tail,val);
        return;
    }
    int len=findLength(head);
    if(k>=len)
    {
        InsertAtTail(head,tail,val);
        return;
    }
    while(k!=1)
    {
        temp=temp->next;
        k--;
    }
    newListNode->next=temp->next;
    newListNode->prev=temp;
    temp->next->prev=newListNode;
    temp->next=newListNode;
}

void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"linked list is empty firstly insert a node "<<endl;
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v,k;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    if(n==0)
    {
        cout<<"There is no node in the linked list ";
        return 0;
    }
    cout<<"Enter the value of nodes ";
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"Enter the value of k ";
    cin>>k;
    cout<<endl<<"Enter the value that you want to insert ";
    cin>>v;
    InsertAtPosition(head,tail,v,k);
    print(head);
}


output

Enter the length of LinkedList 
5
Enter the value of nodes
1
2
3
4
5
Enter the value of k 3

Enter the value that you want to insert 100
1 2 3 100 4 5

e) Deletion of the node at the last position

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode* prev;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
    ~ListNode()
    {
        int val=this->val;
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
    }
};
int FindLength(ListNode* head)
{
    ListNode* temp=head;
    int len=1;
    while(temp->next!=NULL)
    {
        temp=temp->next;
        len++;
    }
    return len;

}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void deleteAtTail(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"we cant delete any this here no ListNode is present";
        return;
    }
    ListNode* temp=tail;
    tail=tail->prev;
    tail->next=NULL;
    temp->prev=NULL;
    delete temp;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"linked is empty firsly insert node than print "<<endl;
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v,k;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of nodes ";
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    print(head);
    cout<<endl<<"After delete the last node the linked list is "<<endl;
    deleteAtTail(head,tail);
    print(head);
}


output

Enter the length of LinkedList 
5
Enter the value of first node
1
2
3
4
5
1 2 3 4 5 
After delete the last node the 
linked list is
1 2 3 4

f) Deletion of the node at the first position


#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode* prev;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
    ~ListNode()
    {
        int val=this->val;
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
    }
};
int FindLength(ListNode* head)
{
    ListNode* temp=head;
    int len=1;
    while(temp->next!=NULL)
    {
        temp=temp->next;
        len++;
    }
    return len;

}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void deleteAtHead(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"we cant delete any this here no node is present";
        return;
    }
    ListNode* temp=head;
    head=head->next;
    temp->next =NULL;
    head->prev=NULL;
    delete temp;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v,k;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    cout<<"Enter the value of nodes "<<endl;
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"The linked list is"<<endl;
    print(head);
    cout<<endl<<"After deletion the first node the linked list is "<<endl;
    deleteAtHead(head,tail);
    print(head);
}

output

Enter the length of LinkedList 
5
Enter the value of nodes
1
2
3
4
5
The linked list is
1 2 3 4 5 
After deletion the first node the linked list is
2 3 4 5

g) Deletion of the node for a given key

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode* prev;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
        this->prev=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
    ~ListNode()
    {
        int val=this->val;
        if(this->next!=NULL)
        {
            delete next;
            this->next=NULL;
        }
    }
};
int FindLength(ListNode* head)
{
    ListNode* temp=head;
    int len=1;
    while(temp->next!=NULL)
    {
        temp=temp->next;
        len++;
    }
    return len;

}
void deleteAtHead(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"we cant delete any this here no ListNode is present";
        return;
    }
    if(head->next==NULL)
    {
        ListNode* temp=head;
        head=head->next;
        delete temp;
        return;
    }
    ListNode* temp=head;
    head=head->next;
    temp->next =NULL;
    head->prev=NULL;
    delete temp;
}
void deleteAtTail(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"we cant delete any this here no ListNode is present";
        return;
    }
    ListNode* temp=tail;
    tail=tail->prev;
    tail->next=NULL;
    temp->prev=NULL;
    delete temp;
}void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode= new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->prev=tail;
    tail=newListNode;
}
void DeleteValuedNode(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        cout<<"There is no node to delete ";
        return;
    }
    if(head->val==val)
    {
        deleteAtHead(head,tail);
        return;
    }
    if(tail->val==val)
    {
        deleteAtTail(head,tail);
        return;
    }
    ListNode* temp=head;
    ListNode* temp1;
    int len=FindLength(head);
    for(int i=0;i<len;i++)
    {
        if(temp->val==val)
        {
            temp1=temp->prev;
            temp1->next=temp->next;
            temp->next->prev=temp1;
            temp->prev=NULL;
            temp->next=NULL;
            delete temp;
            return;
        }
        temp=temp->next;
    }
    cout<<"There is no key of this value "<<endl;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int n,v,k;
    cout<<"Enter the length of LinkedList ";
    cin>>n;
    ListNode* head=NULL;
    ListNode* tail=head;
    if(n==0)
    {
        cout<<"linked list is empty firstly insert the node ";
        return 0;
    }
    cout<<"Enter the value of nodes "<<endl;
    while(n--)
    {
        cin>>v;
        InsertAtTail(head,tail,v);
    }
    cout<<"linked list is "<<endl;
    print(head);
    cout<<endl<<"Enter the key of node that you want to delete "<<endl;
    cin>>k;
    DeleteValuedNode(head,tail,k);
    cout<<"Linked list after deletion a key"<<endl;
    print(head);
    return 0;
}


output

Enter the length of LinkedList 
5
Enter the value of nodes
1
2
3
4
5
Enter the key of node that you want to delete 3
1 2 4 5

2. Create C++ programming  for  circular single linked list and a circular double linked list for the following 

a) Check if the list is empty

#include<iostream>
using namespace std;
class ListNode
{
    public:
    int val;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=this;
    }
};
int FindLength(ListNode* head)
{
    ListNode* temp=head;
    if(temp==NULL)
    {
        return 0;
    }
    int i=1;
    while(temp->next!=head)
    {
        i++;
        temp=temp->next;
    }
    return i;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->next=head;
    tail=newNode;
}
int main()
{
    int v,k;
    cout<<"Enter the length of the list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<" Enter the value of the linked list ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    int len=FindLength(head);
    cout<<len<<endl;
    if(len==0)
    {
        cout<<"Linked list is empty";
    }
    else
    cout<<"Linked list is not empty";
}
output

Enter the length of the list 5
Enter the value of the linked list 1
Enter the value of the linked list 2
Enter the value of the linked list 3
Enter the value of the linked list 4
Enter the value of the linked list 5
5
Linked list is not empty

b) Count the number of nodes in the list

#include<iostream>
using namespace std;
class ListNode
{
    public:
    int val;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=this;
    }
};
int FindLength(ListNode* head)
{
    ListNode* temp=head;
    if(temp==NULL)
    {
        return 0;
    }
    int i=1;
    while(temp->next!=head)
    {
        i++;
        temp=temp->next;
    }
    return i;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->next=head;
    tail=newNode;
}
int main()
{
    int v,k;
    cout<<"Enter the length of the list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<" Enter the value of the linked list ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    int len=FindLength(head);
    cout<<len<<endl;
   cout<<"Number of nodes in this linked list is ";
   cout<<len;
}

output

Enter the length of the list 5
Enter the value of the linked list 1
Enter the value of the linked list 2
Enter the value of the linked list 3
Enter the value of the linked list 4
Enter the value of the linked list 5
5
Number of nodes in this linked list is 5

c) Traverse each node of the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode=new ListNode(val);
        head=newListNode;
        tail=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    newListNode->next=head;
    tail->next=newListNode;
    tail=newListNode;
}
void print(ListNode* &head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp=head;
    cout<<temp->val<<" ";
    temp=temp->next;
    while(temp!=head)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int v,k;
    cout<<"Enter the length of the list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<" Enter the value of the linked list ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    cout<<"The linked list is "<<endl;
    print(head);
    cout<<endl;
    return 0;
}

output

Enter the length of the list 5
Enter the value of the linked list 1
Enter the value of the linked list 2
Enter the value of the linked list 3
Enter the value of the linked list 4
Enter the value of the linked list 5
The linked list is 
1 2 3 4 5

d) Insertion of a node at the beginning of the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* next;
    ListNode()
    {
        this->val=0;
        this->next=NULL;
    }
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode=new ListNode(val);
        head=newListNode;
        tail=newListNode;
        tail->next=newListNode;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    newListNode->next=head;
    tail->next=newListNode;
    tail=newListNode;
}
void InsertAtHead(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode=new ListNode(val);
        head=newNode;
        tail=newNode;
        tail->next=head;
        return;
    }
    ListNode* newNode=new ListNode(val);
    newNode->next=head;
    tail->next=newNode;
    head=newNode;
}
void print(ListNode* &head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp=head;
    cout<<temp->val<<" ";
    temp=temp->next;
    while(temp!=head)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int v,k;
    cout<<"Enter the length of the list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<" Enter the value of the linked list ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    cout<<"currently our linked list is "<<endl;
    print(head);
    cout<<endl<<"Enter the no of nodes that you want to insert at head "<<endl;
    cin>>v;
    while(v--)
    {
        cout<<"Enter the no that you want to insert at begining ";
        cin>>k;
        InsertAtHead(head,tail,k);
    }
    cout<<endl<<"After inserting the node at begining the new linked list is "<<endl;
    print(head);
    cout<<endl;
    return 0;
}


output

Enter the length of the list 5
Enter the value of the linked list 1
Enter the value of the linked list 2
Enter the value of the linked list 3
Enter the value of the linked list 4
Enter the value of the linked list 5
currently our linked list is 1 
2 3 4 5 
Enter the no of nodes that you want to insert at head 1       
Enter the no that you want to insert at beagning 100

After inserting the node at beginning the new linked list is  
100 1 2 3 4 5

e) Deletion of the node at the end of the list

#include<iostream>
using namespace std;
class ListNode
{
    public:
    int val;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
    }
    ~ListNode()
    {
        int data=this->val;
        if(this->next!=NULL)
        {
            this->next=NULL;
            delete next;
        }
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newListNode=new ListNode(val);
        head=newListNode;
        tail=newListNode;
        tail->next=head;
        return;
    }
    ListNode* newListNode=new ListNode(val);
    tail->next=newListNode;
    newListNode->next=head;
    tail=newListNode;
}
void DeleteTail(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"linked list is empty currently ";
        return;
    }
    if(head->next==head)
    {
        ListNode* temp=head;
        delete temp;
        head=NULL;
        tail=NULL;
        return;
    }
    ListNode* temp=head;
    while(temp->next!=tail)
    {
        temp=temp->next;
    }
    temp->next=head;
    tail->next=NULL;
    delete tail;
    tail=temp;
}
void print(ListNode* &head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp=head;
    cout<<temp->val<<" ";
    temp=temp->next;
    while(temp!=head)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int v,k;
    cout<<"Enter the length of the list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<" Enter the value of the linked list ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    cout<<"currently our linked list is ";
    print(head);
    if(head==NULL)
    {
        return 0;
    }
    cout<<endl<<"After deletion of end of list "<<endl;
    DeleteTail(head,tail);
    print(head);
    cout<<endl;
    return 0;
}


output

Enter the length of the list 5
Enter the value of the linked list 1
Enter the value of the linked list 2
Enter the value of the linked list 3
Enter the value of the linked list 4
Enter the value of the linked list 5
currently our linked list is 1 
2 3 4 5
After deletion of end of list  
1 2 3 4

2. Create C++ programming  for circular double linked list for the following 

a) Check if the list is empty

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
int Findlength(ListNode* head)
{
    if(head==NULL)//this important case
    return 0;
    ListNode* temp=head;
    int i=1;
    while(temp->next!=head)
    {
        i++;
        temp=temp->next;
    }
    return i;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode= new ListNode(val);
        head=newNode;
        tail=newNode;
        tail->next=head;
        head->prev=tail;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->prev=tail;
    newNode->next=head;
    head->prev=newNode;
    tail=newNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp=head;
    cout<<temp->val<<" ";
    temp=temp->next;
    while(temp!=head)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int i,v,k;
    cout<<"Enter the length of linked list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v>0)
    {
        cout<<"Enter the val of node ";
        cin>>k;
        InsertAtTail(head,tail,k);
        v--;
    }
    if(Findlength(head)>0)
    {
        cout<<"List is not empty ";
    }
    else
    cout<<"List is empty ";
}



output

Enter the length of linked list 5
Enter the val of node 1
Enter the val of node 2
Enter the val of node 3
Enter the val of node 4
Enter the val of node 5
List is not empty


b) Count the number of nodes in the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
int Findlength(ListNode* head)
{
    if(head==NULL)//this important case
    return 0;
    ListNode* temp=head;
    int i=1;
    while(temp->next!=head)
    {
        i++;
        temp=temp->next;
    }
    return i;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode= new ListNode(val);
        head=newNode;
        tail=newNode;
	tail->next=head;
	head->prev=tail;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->prev=tail;
    newNode->next=head;
    head->prev=newNode;
    tail=newNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp = head;
    do
    {
        cout << temp->val << " ";
        temp = temp->next;
    } while (temp != head);

    cout << endl;
}
int main()
{
    int i,v,k;
    cout<<"Enter the length of linked list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<"Enter the val of node ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    print(head);
    cout<<endl;
    cout<<"The length of the linked list is "<<Findlength(head)<<endl;
}


output

Enter the length of linked list 5
Enter the val of node 1
Enter the val of node 2
Enter the val of node 3
Enter the val of node 4
Enter the val of node 5
1 2 3 4 5 

The length of the linked list is 5

c) Traverse each node of the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode= new ListNode(val);
        head=newNode;
        tail=newNode;
	tail->next=head;
	head->prev=tail;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->prev=tail;
    newNode->next=head;
    head->prev=newNode;
    tail=newNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp = head;
    do
    {
        cout << temp->val << " ";
        temp = temp->next;
    } while (temp != head);

    cout << endl;
}
int main()
{
    int i,v,k;
    cout<<"Enter the length of linked list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<"Enter the val of node ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    print(head);
    
}


output

Enter the length of linked list 5
Enter the val of node 1
Enter the val of node 2
Enter the val of node 3
Enter the val of node 4
Enter the val of node 5
1 2 3 4 5

d) Insertion of a node at the beginning of the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=NULL;
        this->prev=NULL;
    }
};
void InsertAtHead(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode= new ListNode(val);
        head=newNode;
        tail=newNode;
	tail->next=head;
	head->prev=tail;
        return;
    }
    ListNode* newNode=new ListNode(val);
    newNode->next=head;
    head->prev=newNode;
    tail->next=newNode;
    newNode->prev=tail;
    head=newNode;
}
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode= new ListNode(val);
        head=newNode;
        tail=newNode;
	tail->next=head;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->prev=tail;
    newNode->next=head;
    head->prev=newNode;
    tail=newNode;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp = head;
    do
    {
        cout << temp->val << " ";
        temp = temp->next;
    } while (temp != head);

    cout << endl;
}
int main()
{
    int i,v,k;
    cout<<"Enter the length of linked list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<"Enter the val of node ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    print(head);
    cout<<endl;
    cout<<"Enter how many nodes you want to insert at head ";
    cin>>v;
    while(v--)
    {
        cout<<"Enter the value of node that you want to insert at head ";
        cin>>k;
        InsertAtHead(head,tail,k);
    }
    cout<<"Linkedlist after insertion at head is"<<endl;
    print(head);
}

output

Enter the length of linked list 5
Enter the val of node 1
Enter the val of node 2
Enter the val of node 3
Enter the val of node 4
Enter the val of node 5
1 2 3 4 5 

Enter how many nodes you want to insert at head 1
Enter the value of node that you want to insert at head 100  
Linkedlist after insertion at head is 
100 1 2 3 4 5

e) Deletion of the node at the end of the list

#include<iostream>
using namespace std;
class ListNode
{
public:
    int val;
    ListNode* prev;
    ListNode* next;
    ListNode(int val)
    {
        this->val=val;
        this->next=this;
        this->prev=this;
    }
    ~ListNode()
    {
        int val=this->val;
        if(this->next!=NULL)
        {
            this->next=NULL;
            delete next;
        }
    }
};
void InsertAtTail(ListNode* &head,ListNode* &tail,int val)
{
    if(head==NULL)
    {
        ListNode* newNode= new ListNode(val);
        head=newNode;
        tail=newNode;
        tail->next=head;
        head->prev=tail;
        return;
    }
    ListNode* newNode=new ListNode(val);
    tail->next=newNode;
    newNode->next=head;
    newNode->prev=tail;
    head->prev=newNode;
    tail=newNode;
}
void DeleteAtTail(ListNode* &head,ListNode* &tail)
{
    if(head==NULL)
    {
        cout<<"we cant delete any element linked list empty ";
        return;
    }
    if(head->next==head)
    {
        ListNode* temp=head;
        delete temp;
        head=NULL;
        tail=NULL;
        return;
    }
    ListNode* temp=head;
    while(temp->next!=tail)
    {
        temp=temp->next;
    }
    temp->next=head;
    head->prev=temp;
    tail->next=NULL;
    tail->prev=NULL;
    delete tail;
    tail=temp;
}
void print(ListNode* head)
{
    if(head==NULL)
    {
        cout<<"Linked list is empty firstly insert node ";
        return;
    }
    ListNode* temp = head;
    cout<<temp->val<<" ";
    temp=temp->next;
    while(temp!=head)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    int i,v,k;
    cout<<"Enter the length of linked list ";
    cin>>v;
    ListNode* head=NULL;
    ListNode* tail=head;
    while(v--)
    {
        cout<<"Enter the val of node ";
        cin>>k;
        InsertAtTail(head,tail,k);
    }
    print(head);
    cout<<endl;
    DeleteAtTail(head,tail);
    cout<<"After deletion the end node the linked list is "<<endl;
    print(head);
}

output

Enter the length of linked list 5
Enter the val of node 1
Enter the val of node 2
Enter the val of node 3
Enter the val of node 4
Enter the val of node 5
1 2 3 4 5 
After deletion the end node the linked list is
1 2 3 4





