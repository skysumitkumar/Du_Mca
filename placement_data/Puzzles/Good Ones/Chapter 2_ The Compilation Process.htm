<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html -->
<HTML><HEAD><TITLE>Chapter 2. The Compilation Process</TITLE>
<META http-equiv=Content-Type content="text/html; charset=ISO-8859-1">
<META content="MSHTML 6.00.2800.1491" name=GENERATOR><LINK 
title="Introduction to Reverse Engineering Software" href="index.html" 
rel=home><LINK title="Introduction to Reverse Engineering Software" 
href="index.html" rel=up><LINK title=Chapter&nbsp;1.&nbsp;Introduction 
href="ch01.html" rel=previous><LINK title="Chapter&nbsp;3.&nbsp;Gathering Info" 
href="ch03.html" rel=next></HEAD>
<BODY text=black vLink=#840084 aLink=#0000ff link=#0000ff bgColor=white>
<DIV class=navheader>
<TABLE width="100%" summary="Navigation header">
  <TBODY>
  <TR>
    <TH align=middle colSpan=3>Chapter&nbsp;2.&nbsp;The Compilation 
  Process</TH></TR>
  <TR>
    <TD align=left width="20%"><A accessKey=p 
      href="http://www.acm.uiuc.edu/sigmil/RevEng/ch01.html">Prev</A>&nbsp;</TD>
    <TH align=middle width="60%">&nbsp;</TH>
    <TD align=right width="20%">&nbsp;<A accessKey=n 
      href="http://www.acm.uiuc.edu/sigmil/RevEng/ch03.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=chapter lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title><A name=compile-process-chapter></A>Chapter&nbsp;2.&nbsp;The 
Compilation Process</H2></DIV></DIV>
<DIV></DIV></DIV>
<DIV class=toc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#id2550025">Intro</A></SPAN>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#the_compiler">The 
  Compiler</A></SPAN>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#the_preprocessor">The C 
  Preprocessor</A></SPAN>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#parsing_and_translation">Parsing 
  And Translation Stages</A></SPAN>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#compile_asm_stage">Assembly 
  Stage</A></SPAN>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#linking_stage">Linking 
  Stage</A></SPAN>
  <DT><SPAN class=sect1><A 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch02.html#id2558687">Java 
  Compilation Process</A></SPAN></DT></DL></DIV>
<DIV class=revhistory>
<TABLE width="100%" summary="Revision history" border=0>
  <TBODY>
  <TR>
    <TH vAlign=top align=left colSpan=3><B>Revision History</B></TH></TR>
  <TR>
    <TD align=left>Revision $Revision: 1.4 $</TD>
    <TD align=left>$Date: 2004/02/12 21:43:34 $</TD>
    <TD align=left>&nbsp;</TD></TR></TBODY></TABLE></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id2550025></A>Intro</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>Compilation in general is split into roughly 5 stages: Preprocessing, 
Parsing, Translation, Assembling, and Linking. </P>
<DIV class=figure><A name=id2553538></A>
<P class=title><B>Figure&nbsp;2.1.&nbsp;The compilation Process</B></P>
<DIV class=mediaobject><IMG alt="The compilation Process" 
src="Chapter&nbsp;2_&nbsp;The Compilation Process_files/Compilation.png"></DIV></DIV>
<P></P>
<P>All 5 stages are implemented by one program in UNIX, namely cc, or in our 
case, gcc (or g++). The general order of things goes gcc -&gt; gcc -E -&gt; gcc 
-S -&gt; as -&gt; ld. </P>
<P>Under Microsoft Windows©, however, the process is a bit more obfuscated, but 
once you delve under the MSVC++ front end, it is essentially the same. Also note 
that the GNU toolchain is available under Microsoft Windows©, through both the 
<A href="http://www.mingw.org/" target=_top>MinGW project</A> as well as the <A 
href="http://www.cygwin.com/" target=_top>Cygwin Project</A> and behaves the 
same as under UNIX. Cygwin provides an entire POSIX compatibility layer and 
UNIX-like environment, where as MinGW just provides the GNU buildchain itself, 
and allows you to build native windows apps without having to ship an additional 
dll. Many other commercial compilers exist, but they are omitted for space. 
</P></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=the_compiler></A>The 
Compiler</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>Despite their seemingly disparate approaches to the development environment, 
both UNIX and Microsoft Windows© do share a common architectural back-end when 
it comes to compilers (and many many other things, as we will find out in the 
coming pages). Executable generation is essentially handled end-to-end on both 
systems by one program: the compiler. Both systems have a single front-end 
executable that acts as glue for essentially all 5 steps mentioned above. </P>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2572044></A>gcc</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>gcc is the C compiler of choice for most UNIX. The program gcc itself is 
actually just a front end that executes various other programs corresponding to 
each stage in the compilation process. To get it to print out the commands it 
executes at each step, use <SPAN><B class=command>gcc -v</B></SPAN> </P></DIV>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2572062></A>cl.exe</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>cl.exe is the back end to MSVC++, which is the the most prevalent development 
environment in use on Microsoft Windows©. You'll find it has many options that 
are quite similar to gcc. Try running <SPAN><B class=command>cl -?</B></SPAN> 
for details. </P>
<P>The problem with running cl.exe outside of MSVC++ is that none of your 
include paths or library paths are set. Running the program <SPAN><B 
class=command>vsvars32.bat</B></SPAN> in the CommonX/Tools directory will give 
you a shell with all the appropriate environment variables set to compile from 
the command line. If you're a fan of Cygwin, you may find it more comfortable to 
cut and paste vsvars32.bat into cygwin.bat. </P></DIV></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=the_preprocessor></A>The C 
Preprocessor</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>The preprocessor is what handles the logic behind all the # directives in C. 
It runs in a single pass, and essentially is just a substitution engine. </P>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2572107></A>gcc -E</H3></DIV></DIV>
<DIV></DIV></DIV>
<P><SPAN><B class=command>gcc -E</B></SPAN> runs only the preprocessor stage. 
This places all include files into your .c file, and also translates all macros 
into inline C code. You can add <SPAN><B class=command>-o file</B></SPAN> to 
redirect to a file. </P></DIV>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2572126></A>cl -E</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>Likewise, <SPAN><B class=command>cl -E</B></SPAN> will also run only the 
preprocessor stage, printing out the results to standard out. </P></DIV></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=parsing_and_translation></A>Parsing 
And Translation Stages</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>The parsing and translation stages are the most useful stages of the 
compiler. Later in this book, we will use this functionality to teach ourselves 
assembly, and to get a feel for the type of code generated by the compiler under 
certain circumstances. Unfortunately, the UNIX world and the Microsoft Windows© 
world diverge on their choice of syntax for assembly, as we shall see in a bit. 
It is our hope that exposure to both of these syntax methods will increase the 
flexibility of the reader when moving between the two environments. Note that 
most of the GNU tools do allow the flexibility to choose Intel syntax, should 
you wish to just pick one syntax and stick with it. We will cover both, however. 
(FIXME: Should we?) </P>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2538580></A>gcc -S</H3></DIV></DIV>
<DIV></DIV></DIV>
<P><SPAN><B class=command>gcc -S</B></SPAN> will take .c files as input and 
output .s assembly files in AT&amp;T syntax. If you wish to have Intel syntax, 
add the option <SPAN><B class=command>-masm=intel</B></SPAN>. To gain some 
association between variables and stack usage, use add <SPAN><B 
class=command>-fverbose-asm</B></SPAN> to the flags. </P>
<P>gcc can be called with various optimization options that can do interesting 
things to the assembly code output. There are between 4 and 7 general 
optimization classes that can be specified with a -ON, where 0 &lt;= N &lt;= 6. 
0 is no optimization (default), and 6 is usually maximum, although oftentimes no 
optimizations are done past 4, depending on architecture and gcc version. </P>
<P>There are also several fine-grained assembly options that are specified with 
the -f flag. The most interesting are -funroll-loops, -finline-functions, and 
-fomit-frame-pointer. Loop unrolling means to expand a loop out so that there 
are n copies of the code for n iterations of the loop (ie no jmp statements to 
the top of the loop). On modern processors, this optimization is negligible. 
Inlining functions means to effectively convert all functions in a file to 
macros, and place copies of their code directly in line in the calling function 
(like the C++ inline keyword). This only applies for functions called in the 
same C file as their definition. It is also a relatively small optimization. 
Omitting the frame pointer (aka the base pointer) frees up an extra register for 
use in your program. If you have more than 4 heavily used local variables, this 
may be rather large advantage, otherwise it is just a nuisance (and makes 
debugging much more difficult). </P>
<DIV class=tip style="MARGIN-LEFT: 0.5in; MARGIN-RIGHT: 0.5in">
<TABLE summary="Tip: NOTE" border=0>
  <TBODY>
  <TR>
    <TD vAlign=top align=middle width=25 rowSpan=2><IMG alt=[Tip] 
      src="Chapter&nbsp;2_&nbsp;The Compilation Process_files/tip.png"></TD>
    <TH align=left>NOTE</TH></TR>
  <TR>
    <TD vAlign=top align=left colSpan=2>
      <P>Since some of these get turned on by default in the higher optimization 
      classes, it is useful to know that despite the fact that the manual page 
      does not mention it explicitly, all of the -f options have -fno- 
      equivalents. So -fno-inline-functions prevents function inlining, 
      regardless of the -O option. </P>
      <P>If you use -fverbose-asm, a non-inclusive list of compiler options is 
      now printed at the top of the assembly output file. An annoying nuisance 
      with gcc-3.x is that it enables many optimizations even at the -O0 level, 
      making it difficult to generate hand-tuned asm from C. You can turn these 
      off one by one using the above mentioned -fno- switch, however. Also one 
      can write inline assembly to make sure that gcc will generate the code 
      desired, but this should not be the preferred approach. 
</P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2538486></A>cl -S</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>Likewise, cl.exe has a -S option that will generate assembly, and also has 
several optimization options. Unfortunately, cl does not appear to allow 
optimizations to be controlled to as fine a level as gcc does. The main 
optimization options that cl offers are predefined ones for either speed or 
space. A couple of options that are similar to what gcc offers are: </P>
<DIV class=literallayout>
<P><BR>-Ob&lt;n&gt;&nbsp;-&nbsp;inline&nbsp;functions&nbsp;(-finline-functions)<BR>-Oy&nbsp;-&nbsp;enable&nbsp;frame&nbsp;pointer&nbsp;omission&nbsp;(-fomit-frame-pointer)<BR></P></DIV>
<P>FIXME: Play with these. </P></DIV></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=compile_asm_stage></A>Assembly 
Stage</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>The assembly stage is where assembly code is translated almost directly to 
machine instructions. Some minimal preprocessing, padding, and instruction 
reordering can occur, however. We won't concern ourselves with that too much, as 
it will become visible during disassembly, which is covered in the section <A 
title="Know Your Compiler" 
href="http://www.acm.uiuc.edu/sigmil/RevEng/ch06.html#asm_know_compiler">Know 
Your Compiler</A> </P>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2518267></A>GNU as</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>as is the GNU assembler. It takes input as an AT&amp;T or Intel syntax asm 
file and generates a .o object file. </P></DIV>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2518279></A>MASM</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>MASM is the Microsoft© assembler. It is executed by running ml. FIXME: Play 
with it and write a bit more. </P></DIV></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=linking_stage></A>Linking 
Stage</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>Both Microsoft Windows© and UNIX have similar linking procedures, although 
the support is slightly different. Both systems support 3 styles of linking, and 
both implement these in remarkably similar ways. </P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=term>Static Linking</SPAN>
  <DD>
  <P>Static linking means that for each function your program calls, the 
  assembly to that function is actually included in the executable file. 
  Function calls are performed by calling the address of this code directly, the 
  same way that functions of your program are called.</P>
  <DT><SPAN class=term>Dynamic Linking</SPAN>
  <DD>
  <P>Dynamic linking means that the library exists in only one location on the 
  entire system, and the operating system's virtual memory system will map that 
  single location into your program's address space when your program loads. The 
  address at which this map occurs is not always guaranteed, although it will 
  remain constant once the executable has been built. Functions calls are 
  performed by making calls to a compile-time generated section of the 
  executable, called the Procedure Linkage Table, PLT, or jump table, which is 
  essentially a huge array of jump instructions to the proper addresses of the 
  mapped memory. These structures will be discussed in <A 
  title="Chapter&nbsp;8.&nbsp;Executable formats" 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch08.html">Chapter&nbsp;8, 
  <I>Executable formats</I></A> and also in the <A 
  title="Chapter&nbsp;9.&nbsp;Code Modification" 
  href="http://www.acm.uiuc.edu/sigmil/RevEng/ch09.html">Code Modification 
  Chapter</A>. (FIXME: Verify PLT on Microsoft Windows©) </P>
  <DT><SPAN class=term>Runtime Linking</SPAN>
  <DD>
  <P>Runtime linking is linking that happens when a program requests a function 
  from a library it was not linked against at compile time. The library is 
  mapped with dlopen() under UNIX, and LoadLibrary() under Microsoft Windows©, 
  both of which return a handle that is then passed to symbol resolution 
  functions (dlsym() and GetProcAddress()), which actually return a function 
  pointer that may be called directly from the program as if it were any normal 
  function. This approach is often used by applications to load user-specified 
  plugin libraries with well-defined initialization functions. Such 
  initialization functions typically report further function addresses to the 
  program that loaded them. </P></DD></DL></DIV>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2518382></A>ld/collect2</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>ld is the GNU linker. It will generate a valid executable file. If you link 
against shared libraries, you will want to actually use what gcc calls, which is 
collect2. FIXME: Watch gcc -v for flags </P></DIV>
<DIV class=sect2 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H3 class=title><A name=id2518396></A>link.exe</H3></DIV></DIV>
<DIV></DIV></DIV>
<P>This is the MSVC++ linker. Normally, you will just pass it options indirectly 
via cl's -link option. However, you can use it directly to link object files and 
.dll files together into an executable. For some reason though, Microsoft 
Windows© requires that you have a .lib (or a .def) file in addition to your 
.dlls in order to link against them. The .lib file is only used in the interim 
stages, but the location to it must be specified on the -LIBPATH: option. 
</P></DIV></DIV>
<DIV class=sect1 lang=en>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=id2558687></A>Java Compilation 
Process</H2></DIV></DIV>
<DIV></DIV></DIV>
<P>Java is "semi-interpreted" language and it differs from C/C++ and the process 
described above. What do we mean by "semi-interpreted" language? Java programs 
execute in the Java Virtual Machine (or JVM), which makes it an interpreted 
language. On the other hand Java unlike pure interpreted languages passes 
through an intermediate compilation step. Java code does not compile to native 
code that the operating system executes on the CPU, rather the result of Java 
program compilation is intermediate bytecode. This bytecode runs in the virtual 
machine. Let us take a look at the process through which the source code is 
turned into executable code and the execution of it. </P>
<P></P>
<DIV class=figure><A name=id2518406></A>
<P class=title><B>Figure&nbsp;2.2.&nbsp;The Java Compile/Execute Path</B></P>
<DIV class=mediaobject><IMG alt="The Java Compile/Execute Path" 
src="Chapter&nbsp;2_&nbsp;The Compilation Process_files/java-compilation.png"></DIV></DIV>
<P></P>
<P>Java requires each class to be placed in its own source file, named with the 
same name as the class name and added suffix <TT class=filename>.java</TT>. This 
basicaly forces any medium sized program to be split in several source files. 
When compiling source code, each class is placed in its own <TT 
class=filename>.class</TT> file that contains the bytecode. The java compiler 
differs from gcc/g++ in the fact that if the class you are compiling is 
dependent on a class that is not compiled or is modified since it was last 
compiled, it will compile those additional classes for you. It acts similarly to 
<SPAN><B class=command>make</B></SPAN>, but is nowhere close to it. After 
compiling all source files, the result will be at least as much class files as 
the sources, which will combine to form your Java program. This is where the 
class loader comes into picture along with the bytecode verifier - two unique 
steps that distinguish Java from languages like C/C++. </P>
<P>The class loader is responsible for loading each class' bytecode. Java 
provides developers with the opportunity to write their own class loader, which 
gives developers great flexibility. One can write a loader that fetches the 
class from everywhere, even IRC DCC connection. Now let us look at the steps a 
loader takes to load a class. </P>
<P>When a class is needed by the JVM the <TT class=function>loadClass(String 
name, boolean resolve);</TT> method is called passing the class name to be 
loaded. Once it finds the file that contains the bytecode for the class, it is 
read into memory and passed to the <TT class=function>defineClass</TT>. If the 
class is not found by the loader, it can delegate the loading to a parent class 
loader or try to use <TT class=function>findSystemClass</TT> to load the class 
from local filesystem. <A 
href="http://java.sun.com/docs/books/vmspec/html/VMSpecTOC.doc.html" 
target=_top>The Java Virtual Machine Specification</A> is vague on the subject 
of when and how the ByteCode verifier is invoked, but by a simple test we can 
infer that the <TT class=function>defineClass</TT> performs the bytecode 
verification. (FIXME maybe show the test). The verifier does <A 
href="http://java.sun.com/docs/books/vmspec/html/ClassFile.doc.html#9766" 
target=_top>four passes</A> over the bytecode to make sure it is safe. After the 
class is successfully verified, its loading is completed and it is available for 
use by the runtime. </P>
<P>The nature of the Java bytecode allows people to easily decompile class files 
to source. In the case where default compilation is performed, even variable and 
method names are recovered. There are bunch of decompilers out there, but a free 
one that works well is Jad. FIXME: add a link. Because of this we will not 
discuss how to reverese engineer software written in Java. </P></DIV></DIV>
<DIV class=navfooter>
<HR>

<TABLE width="100%" summary="Navigation footer">
  <TBODY>
  <TR>
    <TD align=left width="40%"><A accessKey=p 
      href="http://www.acm.uiuc.edu/sigmil/RevEng/ch01.html">Prev</A>&nbsp;</TD>
    <TD align=middle width="20%"><A accessKey=u 
      href="http://www.acm.uiuc.edu/sigmil/RevEng/index.html">Up</A></TD>
    <TD align=right width="40%">&nbsp;<A accessKey=n 
      href="http://www.acm.uiuc.edu/sigmil/RevEng/ch03.html">Next</A></TD></TR>
  <TR>
    <TD vAlign=top align=left 
    width="40%">Chapter&nbsp;1.&nbsp;Introduction&nbsp;</TD>
    <TD align=middle width="20%"><A accessKey=h 
      href="http://www.acm.uiuc.edu/sigmil/RevEng/index.html">Home</A></TD>
    <TD vAlign=top align=right 
      width="40%">&nbsp;Chapter&nbsp;3.&nbsp;Gathering 
Info</TD></TR></TBODY></TABLE></DIV></BODY></HTML>
