ques i

What will be the output of the following?
#include <stdio.h>
#include <conio.h>

void heya();

int main()
{
    extern int a;
    printf("1:  %d",a);
    heya();
    getch();
}
void heya()
{
         printf("2:  %d",a);
}
     
int a=1000;

ans:=

ques ii

#include <stdio.h>
#include <conio.h>

int main()
{
    long int (*p)[10];
    p = (long int(*) [10])malloc(20*sizeof(*p));
    printf("%d    %d    %d",sizeof(p),sizeof(*p), sizeof(**p));
    getch();
    return 0;
}
a)	800 40 4	b) 4  40  4 
b)	800 80 4	d) error

ques iii

how many errors will this function have?

int main()
{
    int i,j;
    i=10;
    j=20;
    const int *ptr;
    ptr = &i;
    i=11;
    printf("2: %d",*ptr);
    *ptr=12;
    printf("1: %d",*ptr);
    ptr =&j;
   printf("3: %d",*ptr);
    getch();
}

a)	0 		b) 	1
b)	2		d) 	3


qeus1:

char* myFunc (char *ptr)
{
ptr += 3;
return (ptr);
} 

int main()
{
char *x, *y;
x = "HELLO";
y = myFunc (x);
printf ("y = %s \n", y);
return 0;
} 

What will print when the sample code above is executed? 

Choice 1 y = HELLO 
Choice 2 y = ELLO 
Choice 3 y = LLO 
Choice 4 y = LO 
Choice 5 x = O 


ques2:

struct node *nPtr, *sPtr; /* pointers for a linked list. */ 
for (nPtr=sPtr; nPtr; nPtr=nPtr->next)

{ 
free(nPtr);
} 

The sample code above releases memory from a linked list. Which of the choices below accurately describes how it will work? 

Choice 1 It will work correctly since the for loop covers the entire list. 
Choice 2 It may fail since each node "nPtr" is freed before its next address can be accessed. 
Choice 3 In the for loop, the assignment "nPtr=nPtr->next" should be changed to "nPtr=nPtr.next". 
Choice 4 This is invalid syntax for freeing memory. 
Choice 5 The loop will never end. 

ques3:

#include<iostream>
using namespace std;

struct struct1
{
       char c1;
       long l1;
       char c2;
       long l2;
};
struct struct2
{
       char c1;
       char c2;
       long l1;
       long l2;
};

int main()
{
    int a = sizeof(struct1);
    int b = sizeof(struct2);
    
    cout<<(a<b?"struct1<struct2":a==b?"struct1==struct2":"struct1>struct2");
    getchar();
    return 0;
}

a.	stuct1<struct2
b.	stuct1=struct2
c.	stuct1>struct2
d.	Error


ques4:

#include <stdio.h> 
int i; 
void increment( int i ) 
{ 
   i++; 
} 

int main() 
{ 
   for( i = 0; i < 10; increment( i ) ) 
   { 
   } 
   printf("i=%d\n", i); 
   return 0; 
}  

What will happen when the program above is compiled and executed? 

Choice 1 It will not compile. 
Choice 2 It will print out: i=9. 
Choice 3 It will print out: i=10. 
Choice 4 It will print out: i=11. 
Choice 5 It will loop indefinitely.

ques5:

int i = 4; 
int x = 6; 
double z; 
z =  x / i; 
printf("z=%.2f\n", z);  

What will print when the sample code above is executed? 
Choice 1 z=0.00 
Choice 2 z=1.00
Choice 3 z=1.50 
Choice 4 z=2.00 
Choice 5 z=NULL 

ques6:

int y[4] = {6, 7, 8, 9}; 
int *ptr = y + 2; 
printf("%d\n", ptr[ 1 ] );  

What is printed when the sample code above is executed? 
Choice 1 6 
Choice 2 7 
Choice 3 8 
Choice 4 9
Choice 5 The code will not compile. 

ques7:

int x[] = {1, 2, 3, 4, 5}; 
int u; 
int *ptr = x; 
???? 
for( u = 0; u < 5; u++ )
{
 printf("%d-", x[u]); 
} 
printf( "\n" ); 

Which one of the following statements could replace the ???? in the code above to cause the string 1-2-3-10-5- to be printed when the code is executed? 
Choice 1 *ptr + 3 = 10; 
Choice 2 *ptr[ 3 ] = 10; 
Choice 3 *(ptr + 3) = 10;
Choice 4 (*ptr)[ 3 ] = 10; 
Choice 5 *(ptr[ 3 ]) = 10; 

ques8:

main()
{
  char *p;
  char buf[10] ={ 1,2,3,4,5,6,9,8};
  p = (buf+1)[5];
  printf("%d" , p);
}

The output for this program is: 

(a) 5
(b) 6
(c) 9
(d) None of the above

ques9:

How can I dynamically allocate a two-dimensional array? 

1) int **array1 = (int **)malloc(nrows * sizeof(int *)); 
for(i = 0; i < nrows; i++)
array1[i] = (int *)malloc(ncolumns * sizeof(int));

2) int **array2 = (int **)malloc(nrows * sizeof(int *)); 
array2[0] = (int *)malloc(nrows * ncolumns * sizeof(int));
for(i = 1; i < nrows; i++)
array2[i] = array2[0] + i * ncolumns;

3) int *array3 = (int *)malloc(nrows * ncolumns * sizeof(int));

4) Any of the above. 


ques10:

main() 
{
char thought[2][30]={"Don`t walk in front of me..","I am not follow"};
printf("%c%c",*(thought[0]+9),*(*(thought+0)+5));
}

What is the output of this program? 

1) k k 
2) Don`t walk in front of me 
3) I may not follow 
4) K 


ques11:

#include <stdio.h> 
void main() 
{ 
int a; printf("%d",a^a); 
}
what will be printed?
1) 1 
2) 0 
3) Unexpected
4) Runtime Error 


ques12:

#include<stdio.h> 

void swap(int&, int&); 
void main() 
{ 
int a = 10,b=20; 
swap (a++,b++); 
printf("\n%d\t%d\t",a, b); 
} 

void swap(int& x, int& y) 
{ 
x+=2; 
y+=3; 
}

what will be the output ?

1) 14, 24 
2) 11, 21 
3) 10, 20 
4) Error 

ques13:

What is the result of the following code? 
x=0;
switch(x)
{
  case 1: printf( "One" );
  case 0: printf( "Zero" );
  case 2: printf( "Hello World" );
}
A. One
B. Zero
C. Hello World
D. ZeroHello World

ques14:

Which of the following reads in a string named x with one hundred characters?
A. fgets(x, 101, stdin);
B. fgets(x, 100, stdin);
C. readline(x, 100, '\n');
D. read(x);

ques15:

#include<stdio.h>
#include<conio.h>
main()
{
    int a[3],i;
    for(i=0;i<3;i++)
    a[i]=i++;
    for(i=0;i<3;i++)
    printf("\t%d",a[i]);
}
a. 0 Garbage Value 2
b. 0 1 2
c. 1 2 3
d. None of the above

ques16:

void main()
{
    int a = 123, b = 456;
    a ^= b ^= a ^= b;
    printf("%d\t%d",a,b);
}
a. 123 456 
b. 123 123
c. 456 456
d. 456 123

ques17:

void main()
{
    int realarray[2]={1,2};
    int *array = &realarray[-1];
    int i;
    for(i=0;i<2;i++)
    {
        printf("\t%d",*array);
        array++;
    }
}
a. Error
b. Garbage Value 1
b. 0 1
d. 1 2

ques18:

main()
{   
    extern i;
    printf("%d\n",i);
    {
        int i=20;
        printf("%d\n",i);
    }
}
a. 20 20
b. Garbage Value 20
c. 0 20
d. Linker Error

ques19:

int main()
{
    int a=500,b=100,c=30,d=40,e=19;
    a+=b-=c*=d/=e%=5;
    printf("\n%d %d %d %d %d",a,b,c,d,e);
}
a. 0 -200 300 10 4
b. 300 -200 300 10 4
c. -200 300 10 4 0 
d. 100 -200 300 4 10

ques20:

void main()
{
    int a=1,b=2,c=3,d=4;
    printf("%d",!a?b?!c:!d:a);
}
a. 1
b. 0
c. No Output
d. Error


ques21:

void main()
{
    int val=1234;
    int* ptr=&val;
    printf("%d %d",val,*ptr++);
}
a. 1234 1234
b. 1235 1235
c. 1234 1235
d. 1235 1234

ques22:

 void func()
    {
      printf("Testing...Done\n");
    }
    void main()
    {
      func;
      func();
    }
a. Compile-Time Error
b. Testing...Done
c. Testing...Done
   Testing...Done
d. None of these 

ques23:

A signed int bitfield 1-bit wide can only hold the values:_________

ques24:

void main()
    {
       int _;
       _=100;
       printf("%d",_);
    }
a. 100
b. Linker Error
c. Run Time Error
d. Compiler Error

ques25:

main()
{
    char *p;
    printf(“%d %d”, sizeof(char *p), sizeof(*p));
}
a. 1 4
b. 4 4
c. 4 1
d. 1 1
e. error

ques26:

 What is the type of variable f2 and p2 in the following declaration?

#define floatptr float *
#define int * intptr

floatptr f1,f2;
intptr p1,p2;

a. float, int pointer
b. float pointer, int pointer
c. float, int
d. float pointer, int

ques27:

main()
 {
   const int x;
   x=128;
   printf(“%d”,x);
 }
a. 128
b. 0
c. Garbage Value
d. Error

ques28:

main()
{
    int val1=1234;
    int val2=01234;
    printf("%d %d",val1,val2);
}
 
a. 1234 1234
b. 1234 01234
c. 1234 Garbage value
d. None of these

ques29:

main()
{
 char *str = "\eMissi\0ssippi\z";
 printf("%s",str);
}
a. eMissi
b. eMissi ssippiz
c. Mississippi 
d. Missi

ques30:

main()
{
 static int a[]={0,1,2,3,4};
 static int *p[]={a,a+1,a+2,a+3,a+4};
 int **ptr;
 ptr=p;
 **ptr++;
 printf("\n%d %d %d",ptr-p,*ptr-a,**ptr);
 *++*ptr;
 printf("\n%d %d %d",ptr-p,*ptr-a,**ptr);
 ++**ptr;
 printf("\n%d %d %d",ptr-p,*ptr-a,**ptr);
 getch();
}
a.
1 0 1 
1 0 2 
1 0 2 
b.
0 1 1
1 1 1
1 1 1
c. 
1 2 3
2 2 3
2 3 3
d.
1 0 1
1 0 1 
1 1 2
e.
1 1 1
1 2 2
1 2 3

ques31:

#define square(b) b*b
main()
{
 int a;
 a=64/square(4);
 printf("\n%d",a);
}
a. 64
b. 4
c. 16 
d. None of the above

ques32:

main()
{
    int x = 5; 
    int y = 10; 
    double z; 
    z = (double) (5 / 10); 
    printf("z = %.2f\n", z); 
}
a. 1.00 
b. 0.50
c. 0.00 
d. -0.50

ques33:

int x=5;
void print()
{
    printf("%d",x--);
}

main()
{
    print(x++);
}
a. 4 
b. 5
c. 6 
d. None of the above


ques34:

int main()
{
    for( int i=0; i<5;i++) {}
    return 0;
}

where the above code compiles and run fine
a.	in both C and C++
b.	in C but not in C++
c.	in C++ but not in C
d.	in neither C nor C++

ques35:

What is the output of following program 

#include<stdio.h>
int main()
{
    #ifdef __cpuscplus
       printf("Hello ");
    #endif
    printf("World \n");
    return 0;
}

a. Hello						
b. Hello World
c. World					
d. compile time error

ques36:

#include<stdio.h>
int main()
{
    int i=1,j=2;
    i=j?i++,j++:i--,j--;
    printf("%d : %d",i,j);
    getchar();
    return 0;
}

a. 0 : 1							
b. 2 : 3
c. 2 : 2
d. compile time error

ques37:

# include<stdio.h>
# define a 10 
int main() 
{ 
   printf("%d..",a); 
   foo(); 
   printf("%d",a); 
   getchar();
   return 0;
} 
int foo() 
{ 
   #undef a 
   #define a 50 
}

a. 10..10
b. 10..50 
c. Error 
d. 0

ques38:

main( )
{
int x=3, y=4, z=4;
printf(“ans = %d”, (z>=y>=x?100:200));
}
a. 100
b. 300
c. 200
d. No Output

ques39:

#include<iosream.h>
int main( )
{
	int a=7;
	cout << “ANDing integer  ‘a’ with true : ” << a && true;
	return 0;
}

(The value of true id defined to be 1)

a.	ANDing integer  ‘a’ with true : 1
b.	ANDing integer  ‘a’ with true : 0
c.	ANDing integer  ‘a’ with true : true
d.	ANDing integer  ‘a’ with true : 7

ques40:

#include <stdio.h> 
main() 
{ 
char str[]="S\065AB"; 
printf("\n%d", sizeof(str)); 
}

a. 7 
b. 6 
c. 5
d. error

ques41:

Consider the following functions:

void f1(int arg)
{
int x = arg;
while (x < 10)
{
printf("hello\n");
x++;
}
}

void f2(int arg)
{
int x = arg;
do
{
printf("hello\n");
x++;
} while (x < 10);
}

Under what circumstances do the two functions f1 and f2 produce the same output?

A. Only when arg < 10.
B. Only when arg > 10.
C. Only when arg = 10.
D. Only when arg != 10.
E. Never, regardless of the value of arg.

ques42:

Consider the following code:
void f1(int x)
{
x = 2;
}
int f2(int x)
{
x = 2;
return x;
}
void go(void)
{
int y = 5;
int x = 5;
f1(x);
f2(y);
printf("x = %d, y = %d\n", x, y);
}
What is printed when the go function is executed?

A. x = 2, y = 2
B. x = 5, y = 2
C. x = 2, y = 5
D. x = 5, y = 5
E. None of the options A - D.

ques43:

(10) Which of the following array initialization statements is valid?
i. char array[] = "hello";
ii. char array[5] = "hello";
iii. char array[6] = "hello";

A. ii only.
B. iii only.
C. i. and ii. only.
D. i. and iii. only
E. All of i., ii., and iii.

ques44:

Consider the following function:
int go(void)
{
char str[] = "asimplestring";
str[3] = '\n';
str[6] = '\0';
printf("strlen(str) = %d\n", strlen(str));
}
What is printed when the go function is executed?

A. strlen(str) = 3
B. strlen(str) = 6
C. strlen(str) = 7
D. strlen(str) = 13
E. strlen(str) = 14

ques45:

Consider the start of the following function:
void calendar(void)
{
DAY today;
...
Which of the following is the correct way to declare a new datatype called DAY for use in
this function?
A. enum DAY {SUN, MON, TUE, WED, THU, FRI, SAT};
B. enum (SUN, MON, TUE, WED, THU, FRI, SAT) DAY;
C. typedef enum {SUN, MON, TUE, WED, THU, FRI, SAT} DAY;
D. typedef DAY enum {SUN, MON, TUE, WED, THU, FRI, SAT};
E. typedef enum DAY (SUN, MON, TUE, WED, THU, FRI, SAT)


ques46:

Consider the following array denition:
#define N 25
int arr[N][N];
Imagine that arr has been initialized such that every element is zero, except the elements
on the two main (top-left to bottom-right) diagonals.
Which of the following code fragments will swap the values on the main diagonal with
those on the other diagonal?

A. for(int n=0; n<N; ++n)
{
arr[n][N-n] = arr[n][N-n];
}
B. for(int n=0; n<N; ++n)
{
arr[n][N-n-1] = arr[n][N-n-1];
}
C. for(int n=0; n<N; ++n)
{
arr[n][N-n-1] = arr[N-n-1][n];
}
D. for(int n=0; n<N; ++n) 
{
int t = arr[n][N-n-1];
arr[n][N-n-1] = arr[n][n];
arr[n][n] = t;
}
E. for(int i=0; i<N; ++i)
{
for(int j=N-1; j>=0; --j)
{
int t = arr[i][j];
arr[i][j] = arr[j][i];
arr[j][i] = t;
}
}

ques47:

Consider the following type declarations and variable denitions:
typedef struct
{
char name[100];
int nenrolled;
} UNIT;
typedef struct
{
char name[50];
int nunits;
int units[16];
} STUDENTS;
extern STUDENTS students[];
extern UNIT units[];
Assuming that all array accesses are valid, which of the following expressions accesses
the rst unit taken by the 1000th student?

A. units[students[999].units[0]];
B. students[999].units[0].units;
C. units[students[999]].units[0];
D. units[units[0].students[999]];
E. units[students[999]][units[0]];

ques48:

Consider the following function:
#include <assert.h>
int go(void)
{
int i = 3 + 4 * 2;
assert(i == 14); // line << X >>
}
What happens at line << X >> when the go function is executed?

A. Nothing happens (variable i remains unchanged).
B. The variable i is changed to equal 14.
C. The program prints an error message and continues.
D. The program prints an error message and terminates successfully.
E. The program prints an error message and terminates unsuccessfully

ques49:
(ASSUME SIZE OF int AS 4bytes)
Void f(char**);

main()
{
  char * argv[] = { "ab" ,"cd" , "ef" ,"gh", "ij" ,"kl" };
  f( argv );
}

void f( char **p )
{
  char* t;

  t= (p+= sizeof(int))[-1];

  printf( "%s" , t);
}
The output for this program is: 

(a) ab
(b) cd
(c) ef
(d) gh


ques50:

Consider the following function call:
fgets(arr, sizeof arr, fp);
What will happen if the next line to be read from fp is longer than array arr?

A. The program will crash.
B. A value of NULL is returned by fgets to indicate a problem.
C. sizeof(arr) characters are read into arr.
D. sizeof(arr)-1 characters are read into arr.
E. The behaviour is undefined

ques51:

Consider the following function:
void go(void)
{
for(int n=0; n<5; ++n)
{
static int n=0;
printf("%d ", n);
n = n+1;
}
}
What is printed when the go function is executed?

A. 0 2 4
B. 0 1 2 3 4
C. 0 0 0 0 0
D. The function never terminates, printing a continuous stream of 0s.
E. This function contains an error.

ques52:

Imagine a small project consisting of a number of C source code les and one header le
which is included by every source file. Which of the following constructs would be good
practice to include in the header file?
i. pre-processor macros.
ii. user-dened datatypes.
iii. variable declarations.

A. i. only.
B. ii. only.
C. i. and ii. only.
D. ii. and iii. only.
E. None of the options A - D.


ques53:
  (ASSUME SIZE OF int AS 4bytes)
  What is the output of the following program? 
  #define SIZE 10
  void size(int arr[SIZE])
  {
          printf("size of array is:%d\n",sizeof(arr));
  }

  int main()
  {
          int arr[SIZE];
          size(arr);
          return 0;
  }


ques54:

#include<stdio.h>

main()
{
  int a=3, b = 5;

  printf(&a["Ya!Hello! how is this? %s\n"], &b["junk/super"]);
  printf(&a["WHAT%c%c%c  %c%c  %c !\n"], 1["this"],
	 2["beauty"],0["tool"],0["is"],3["sensitive"],4["CCCCCC"]);
}

ans:=

ques55:

What is the output of the following code? 

#include<stdio.h>
void main()
{
   int s=0;
   while(s++<10)
   {
      if(s<4 && s<9)
         continue;
      printf("\n%d\t",s);
   }
}
 
1) 1 2 3 4 5 6 7 8 9 
2) 1 2 3 10 
3) 4 5 6 7 8 9 10 
4) 4 5 6 7 8 9

ques56:

What is the output?

#include<stdio.h>
main()
{
      
      int b;
      b = fun(20);
      printf("%d" ,b);
      getchar();
      
}
int fun(int val)
{
    val>20?return (10):return (20);
}

Ans:

ques57:

what will be the program result in?

char *foo()
{
char result[100];
strcpy(result,"anything is good");
return(result);
}

void main()
{
char *j;
j=foo()
printf("%s",j);
getchar();
}

Ans:

ques58:

What would be the output of the following C program? (Is it a valid C program?) 
#include <stdio.h>
int main()
{
        int i=43;
        printf("%d\n",printf("%d",printf("%d",i)));
        return 0;
}

ans:

ques59:

I came across somedeclarations with colons and numbers next to certain fields, like this: 

union record {
	char *name;
	int refcount : 4;
	unsigned dirty : 1;
};
What is this?

ques60:: What is 28884%5, 28884%-5, -28884%5, -28884%-5

ques61:: IS  int (*a)[10] and int *a[10] same?

ques62:: What is it signify:: char (*(*a())[])();

ques63:: What is the difference between const char *a and char* const a ?

ques64:: What is the output

#include<stdio.h>

void main()
{
typedef int LONG;
LONG a=4;
LONG b=68;
float c=0;
c=b;
b+=a;
printf("%d",b);
printf("%f",c);
}

ques65:: What is the output

#include<stdio.h>

void main()
{
unsigned int a=0xffff;
~a;
printf("%f",a);
}

ques66:

What will happen if the following program is executed from command line as shown below?

command line -- test 1 2 3

#include<stdio.h>
void main(int ac,char *av[])
{
int j;
j=av[1]+av[2]+av[3];
printf("%d",j);
}

ques67:IS there any error (if yes,identify the error else give the output)

#include<stdio.h>
void main(int ac,char *av[])
{
printf("%d",av[ac]);
}

ques68::What is the ans on dividing 4.5 by 1.5 ?



































  


 

 