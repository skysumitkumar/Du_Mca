minimum size of data structure...give reason?? 6/8/2005 2:49 AM
What is the minmum size of a data structure. Pls give reason for ur answer. 


Any Data Structure is a concept or logical unit of how to store certain information.

1 Bit is the minimum size od data structure, no matter even if u have to allocate memory/space in multiples of bytes (that's hardware constrained, it may be 2 bytes sometime later), files store data in multiples of 512 Bytes (or something else) blocks.
Even memory allocation is dependent on MM (Memory Management) module.

Also, you may store many 1-bit' s in bytes (div by 8 times), so that is never an issue.

Java and modern versions of C++ compilers provide an implementation of the Boolean Data Strucure BOOL. 



There is a singly linked in which 3rd node should be deleted but without using a temporary node.
i.e. 2nd node should point to the 4th node and memory allocated by 3rd should be freed.


if we know there are 'n' nodes in linked list then we can make last node to point to the 3rd node, then make 2nd node point to the 4th node. Now u know there are 'n' nodes traverse the list till n-1 node and free the 'n'th node which is 3rd node in this case. And make 'n-1'th node->next = NULL. 

  Binary tree 10/5/2005 11:16 PM
hii all
i hav a nice problem , 
im given a binary tree as a sequence of nodes where each node appears as (value,<path>)
	where path is a string containing L & R specifying the route to take from root to the
	node , root being an empty string.
now given a sequence of such touples , i need to find wether it constructs a binary tree or not.
as an example , tree is 
3
/ \
2 4
and the seq will be , [(3,""),(2,"L"),(4,"R")]
thanks to all in advance  


	
what is euler order traversal and how can it be done ? Any suggestions about algo would be
helpful

10/14/2005 11:26 AM
Euler Traversal is the Generalized traversal Containing PreOrder, Inorder, PostOrder Traversals. In this traversal each node is visited 3 times. 

void EulerTraversal(TreeNode *T)
{
if(T)
{
PreOrder(T);
EulerTraversal(T->Left);
InOrder(T);
EulerTraversal(T->Right);
PostOrder(T);
}
} 



computation of the inverse of a matrix 12/13/2005 2:37 AM
Ive spent 3 hrs trying to write the recursive algo for computing the inverse of an n*n matrix..
but no use im not able to compute the determinant save the adjoint...ur help in this regard will
be appreciated
reply asap 

@rehamn 12/13/2005 7:36 PM
the easiest way to find the Determinant is, Convert the matrix into Upper or Lower Triangle by 
matrix transformation rules. Then the product of diagnol elements 
is the determinant. It's nonrecursive. U try it if any queries scrap me. 


can we directly convert a postfix expression to prefix one and viceversa algo/code needed


12/28/2005 1:27 AM
Start reading the post fix expression.
while reading put operands onto the stack
if u get an operator(while reading) pop two
operands from the stack .Now take these two opnds(op1,op1 namely) and an operator(oper)
and form their prefix exp(which is easy op1,op2,oper==>oper,op1,op2)
Now push this prefix exp onto the stack.
continue reading in the same manner.
Lemme know if you have any Qs.

 


revstr(char* str)
{
char* a = str;
char* b = str+ (strlen(str) - 1);

while(a < b)
{
*a = *a + *b;
*b = *a - *b;
*a = *a - *b;
++a;
--b;
}
} 


another famous question from Microsoft.

void Reverse(char * S, int N)
{
char * Start=S;
char * End=&S[N-1];

char Temp;

while (Start<End)
{
Temp=*Start;
*Start=*End;
*End=Temp;
Start++;
End--;
}
}

To reverse a string make a call this way:

int main()
{
char Str[100]={"This is a sample string"};

// Reverse entire string
Reverse(Str, strlen(Str));

// To reverse the first word only
Reverse(Str, 4);

// To reverse the fourth word only
Reverse(Str+10, 6);




reverse of link list

node * insert(node * to_insert,node * sorted) {
if (to_insert->value<sorted->value){
to_insert->next=sorted;
return to_insert;
}
node * temp = sorted;
while((temp->next!=null) && (to_insert->value>=temp->next->value)
temp=temp->next;
if (temp->next==null) {
temp->next=to_insert;
return sorted;
}
to_insert->next=temp->next;
temp->next=to_insert;
return sorted;
}


node * sort(node * list) {
node * sorted=list;
list=list->next;
sorted->next=null;
while (list!=null) {
temp=list;
list=list->next;
temp->next=null;
sorted=insert(temp,sorted);
}
return sorted;
}



sorting in descending order
struct node{
int value;
node* NEXT;
}
Assume HEAD pointer denotes the first element in the linked list
Sort()
{
node* first,second,temp;
first=HEAD;
while(first!=null)
{
second=first->NEXT;
while(second!=null)
{
if(first->value<second->value)
{
temp=new node();
temp->value=first->value;
first->value=second->value;
second->value=temp->value;
delete temp;
}
second=second->NEXT;
}
first=first->NEXT;
}
} 



two d array in spiral binding

void print_spiral(int** arr, int size)
{
int i,j,k,middle;

for(i=size-1, j=0; i>0; i--, j++) {

for(k=j; k<i; k++)
printf("%d", arr[j][k]);

for(k=j; k<i; k++)
printf("%d", arr[k][i]);

for(k=i; k>j; k--)
printf("%d", arr[i][k]);

for(k=i; k>j; k--)
printf("%d", arr[k][j]);
}

middle = (n-1)/2;

if (n % 2 == 1)
printf("%d", arr[middle][middle]);

printf("\n");
}




static void spiralRoute()
{
char a[7][7] = {
{'a', 'b', 'c', 'd', 'e', 'f', 'g'},
{'h', 'i', 'j', 'k', 'l', 'm', 'n'},
{'o', 'p', 'q', 'r', 's', 't', 'u'},
{'1', '2', '3', '4', '5', '6', '7'},
{'O', 'P', 'Q', 'R', 'S', 'T', 'U'},
{'H', 'I', 'J', 'K', 'L', 'M', 'N'},
{'A', 'B', 'C', 'D', 'E', 'F', 'G'},
};
char rightoutput[50] = "abcdefgnu7UNGFEDCBAHO1ohijklmt6TMLKJIP2pqrs5SRQ34";
char myoutput[50];

/* DIRECTIONS:
0: towarding right;
1: towarding down;
2: towarding left;
3: towarding up;
*/
int direction = 0;
int up_ = 0, down_ = 6, right_ = 6, left_ = 0;
int i, counter = 0, bOver = 0;

while (!bOver) {
switch (direction)
{
case 0:
if (right_ < left_)
{
bOver = 1;
} else {
for (i = left_; i <= right_; i++)
{
myoutput[counter++] = a[up_][i];
}
up_++;
direction++;
}
break;
case 1:
if (down_ < up_)
{
bOver = 1;
} else {
for (i = up_; i <= down_; i++)
{
myoutput[counter++] = a[i][right_];
}
right_--;
direction++;
}
break;
case 2:
if (right_ < left_)
{
bOver = 1;
} else {
for (i = right_; i >= left_; i--)
{
myoutput[counter++] = a[down_][i];
}
down_--;
direction++;
}
break;

case 3:
if (down_ < up_)
{
bOver = 1;
} else {
for (i = down_; i >= up_; i--)
{
myoutput[counter++] = a[i][left_];
}
left_++;
direction = 0;
}
break;
}
}
myoutput[counter] = '\0';

printf("rightoutput = %s\n", rightoutput);
printf("myoutput %s\n", myoutput);
if (strcmp(rightoutput, myoutput) == 0) {
printf("passed\n");
} else {
printf("not passed\n");
}
}





reverse a integer

int reverse(int i)
{
int rev=0, x=0;
if((i /10) ==0)
return i;
while((i /10) >0)
{
x = i %10;

i= i/10;
rev= (rev *10) +x;
}
rev= rev*10 +i;

return rev;
} 



#include <stdio.h>
main() {
char *x= "acbcd";
char y = 'c';
int len = strlen(x);
int i=0,j=0;
for( i = len-1; i>= 0; i-- ) {
if ( x[i] == y ) {
break;
}
}
printf("%s%c%s%d%s","the # of last occur of ",y," is ",i+1,"\n");
} 



hey guys , was asked to remove duplicate elements from a list...
without hashing and 
in O(n)(so no compariison sort)...

1. Write a program to find the first non-repeating character in a null terminating string.
   Should be O(n) time.

2. Write a program to remove all duplicate elements from a string. Again O(n) time. 

3. Now this is tricky one, hope I explain it well.... 
a. You are given a Double Link List with one pointer of each node pointing to the next node just like in a single link list.
b The second pointer however CAN point to any node in the list and not just the previous node.

Now write a program in O(n) time to duplicate this list. That is, write a program which will 
create a copy of this list. 


4. You are given two things:
a. A binary search tree of integer value nodes (remember integer can have negative values)
b. An integer value X

Write a program that checks if a path exists in the binary search tree that has a total sum of X. By path we mean a complete path - from root of tree to a leaf.  
 
  
   3/17/2006 10:17 AM
5. Write a C++ class definition for a singleton design pattern. 

(Singleton desing pattern means only one instance of the class can exist for the entire program)  




A community of 500 people, each with either brown or blue eyes, lives in a totally enclosed compound with no reflective surfaces (including bodily surfaces.) The law in this community states that no member may ever discuss their own eye color or anyone else's. Everyone will ALWAYS obey the laws and everyone knows that everyone will. Bottom line: no one can figure out their own eye color.

Another law in this community is that if you ever do find out that your eye color is blue, you must kill yourself at midnight that night. This is not a problem, though, since no one can figure that out.

One day, a stranger comes into the compound and announces at noon so that everyone hears him that at least one member of the community has blue eyes. He then leaves the compound.

As result, all fifteen blue eyed members kill themselves.

A) How long after the man's announcement do they die? (not too hard)

B) What new piece of information did the stranger give them? (quite a bit harder)



neha_heights (5/31/2006 4:28:53 AM): an infinite array has been given. in this array there are some zeros initially and after then rest of the elements are 1's . how will u find out the first 1's position in less than O(n) time SOLUTION : Here we assume that the array is in a random access memory. Do a binary search. First look at the elements with indices 1,2,4,8,16,...,etc. When you find the first 1, say between 2^{k-1} and 2^k, do a binary search in between these two. If n is the position of the first 1, then it should take about O(log(n)). 


: Imagine that you have 26 constants, labelled A through Z. Each constant is assigned a value in the following way: A = 1; the rest of the values equal their position in the alphabet (B corresponds to the second position so it equals 2, C = 3, etc.) raised to the power of the preceeding constant value. So, B = 2 ^ (A's value), or B = 2^1 = 2. C = 3^2 = 9. D = 4^9, etc., etc. Find the exact numerical value to the following equation: 
(X - A) * (X - B) * (X - C) * ......... * (X - Z) 
