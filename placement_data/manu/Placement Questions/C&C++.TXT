Question:
---------------

What is the value of "a" after this?
int (*a) [10];
a++;

ANSWER:
---------------
int (*a)[10]; represents the declaration of a pointer to an array of ten integers. So the value of a is initially some address allocated by the compiler and don't rely on the fact the address is 0 as it happens for static variables. 
The value can be zero if you add the "static" keyword in front of declaration but I don't advise you to further use this pointer to access some elements.

If the integer is n bytes ( 2 or 4 depending on the language) it is true that the value of a will be increase with 10*n.

Test this program to understand:

#include <stdio.h>

void main(int argc,char*argv[])
{
int b[10]={1,2,3,4};
int (*a)[10];
printf("%p\n",a);
printf("%d\n",(*a)[0]);
a++;
printf("%p\n",a);
a=&b;
printf("%p\n",a);
printf("%d\n",(*a)[0]);
} 



Question:
What is polymorphism?


'Polymorphism' is an object oriented term. Polymorphism may be defined as the ability of related objects to respond to the same message with different, but appropriate actions. In other words, polymorphism means taking more than one form. 
Polymorphism leads to two important aspects in Object Oriented terminology - Function Overloading and Function Overriding. 
Overloading is the practice of supplying more than one definition for a given function name in the same scope. The compiler is left to pick the appropriate version of the function or operator based on the arguments with which it is called. 
Overriding refers to the modifications made in the sub class to the inherited methods from the base class to change their behaviour.



I thought Polymorphism is what happened to the "Teenage Mutant Ninja Turtles" when they can in contact with that ooze. Really!

It's availible at your nearest video store. 



Polymorphism can be achieved by the following:

Operator Overloading
Function Overloading
Function Overridding 



Everyone here has forget about virtual functions. The most important aspect of C++ is that the polymorphism can be achieved by virtual functions. 

Polymorphism is one of the main pillars of object oriented programming. It is concept to allow method invocation to be performed always on the most derived object. It is essentially associated with virtually function and late binding idea. 


Polymorphisam is having many forms.
- a particular construct can be executed in different ways. 


Polymorphism is Basically Using the same external interface for different internal structures.

That means Polymorphism can take more than one form.

Polymorphism lets u use same functions & operators in differnt way .

ex: Operator Overloading(Static)
Function Overloading(Static)

Virtual Functions(Dynamic)



Polymorphism allows objects to have both a static and a dynamic type. The static type is the pointer type; the dynamic type is what it points to. Virtual functions are dispatched based on dynamic type, so a base class pointer can point to a derived object and, using the vtable, call the derived class' virtual function:

class Base {
...
virtual DoSomething() {...}
};

class Derived : public Base {
...
virtual DoSomething() {...}
};

Base *b = new Derived; // static type Base, dynamic type Derived
b->DoSomething(); // calls virtual Derived::DoSomething() 





Question:
What is operator overloading?



When an operator is overloaded, it takes on an additional meaning relative to a certain class. But it can still retain all of its old meanings.

Examples:

1) The operators >> and << may be used for I/O operations because in the <iostream> header, they are overloaded.

2) In a stack class it is possible to overload the + operattor so that it appends the contents of one stack to the contents of another. But the + operator still retains its original meaning relative to other types of data.


Also Polymorphism can be achieved in C++ through operator overloading 

Operator overloading is all about syntax. You can have your class give its own implementation for an operator, so that your class types more closely resemble the built-in types.

For example, if you have an iterator class, you can overload operator++ to iterate to the next element, rather than have a function named something like "Next". 

 


Question:
What are templates?


C++ Templates allow u to generate families of functions or classes that can operate on a variety of different data types, freeing you from the need to create a separate function or class for each type. Using templates, u have the convenience of writing a single generic function or class definition, which the compiler automatically translates into a specific version of the function or class, for each of the different data types that your program actually uses.

Many data structures and algorithms can be defined independently of the type of data they work with. You can increase the amount of shared code by separating data-dependent portions from data-independent portions, and templates were introduced to help you do that. 



Question:
Declare a void pointer

void *malloc(size_t number_of_bytes); 


I think the answer is simply
void* p;

malloc is just the library function called to allocated some memory and of course a void pointer will be returned , but it is the declaration of a void pointer. 



Question:
Type-define a function pointer which takes a int and float as parameter and returns a float *.


the pointer to function can be type defined as:
typedef float*(*pf)(int a, float b) tagPF;


I think should define in this way:
typedef float*(*PF)(int , float );
and use PF as pointer to function.( of one int argument, one floaat argument, returning float *)
like PF a; 

Question:
What does the following C statement do? 
while(*c++ = *d++); assuming c and d are pointers to characters


The loop will be executed until d reaches a null character 


string copy 

Did you find this answer/comment useful ?        
 
sheen   posted 02-23-2001 11:18 PM ET (US) 
--------------------------------------------------------------------------------
23 of 24 people found this post useful.
string copy utill zero appears 

Did you find this answer/comment useful ?        
 
octav_timofte   posted 03-08-2001 11:14 AM ET (US) 
--------------------------------------------------------------------------------
40 of 51 people found this post useful.

String copy is performed indeed but be careful with the space allocated for the destination string. 
Check this example:

char s1[10]="abcde";
char s2[3];

char* c,*d;
c=s2;
d=s1;
while(*c++ = *d++); 
printf("%s - %s\n",s1,s2); 

Did you find this answer/comment useful ?        
 
johny1   posted 10-31-2001 05:50 AM ET (US) 
--------------------------------------------------------------------------------
4 of 13 people found this post useful.
The code is string copy. But it does not add a null pointer to the end. There should also be a check for overlapping addresses. 

Did you find this answer/comment useful ?        
 
jobhunter   posted 11-07-2001 12:43 AM ET (US) 
--------------------------------------------------------------------------------
10 of 27 people found this post useful.
Where is a logical value being returned in the while(*c++ = *d ++)

*c++ = *d++ is not a logical expression, hence incorrect syntactically.

Isn't it. Please correct me if i'm wrong. 

Did you find this answer/comment useful ?        
 
Mohit   posted 02-03-2002 02:14 AM ET (US) 
--------------------------------------------------------------------------------
3 of 11 people found this post useful.
String copy--for sure 

Did you find this answer/comment useful ?        
 
Hotshot   posted 03-13-2002 05:26 PM ET (US) 
--------------------------------------------------------------------------------
41 of 53 people found this post useful.
All that the basic operation :

while (*c++ = *d++)
;

does is to copy the destination string's characters to the source string (here 'd' to 'c'). In the above statement, one after another, the contents being pointed to by the destination pointer ('d') are faithfully copied into the source string, pointed to by ('c').

Then the while condition is evaluated, which works on a boolean basis (TRUTH/FALSITY). In C, a true value is non-zero and false value is '0'. 

So, until the source string ('d') hits the end of the string, '\0' (ASCII - 0), all the contents are copied into the string pointed to by ('c'), including the string delimiter '\0', and evaluated by the while finally for truth/falsity.

The above is a short form of writing :

while (*c == *d) {
c++;
d++;
} 

Did you find this answer/comment useful ?        
 
phil   posted 03-23-2002 12:52 AM ET (US) 
--------------------------------------------------------------------------------
44 of 45 people found this post useful.
jobhunter:

*c++ = *d++
evaluates to the char that was assigned to *c. This is the "boolean" value that while tests. So if this char is 0, then while fails; else it continues. 

Did you find this answer/comment useful ?        




Question:
How do you call a C module within a C++ module.



60 of 74 people found this post useful.
You should use extern "C" for functions, compiled by C compiler and called within a C++ class. You should do that to force the linker to resolve the function name (precisely, the mangling of the name) correctly. 


Did you find this answer/comment useful ?        
 
haha   posted 03-12-2001 06:42 PM ET (US) 
--------------------------------------------------------------------------------
64 of 74 people found this post useful.
extern "C" {
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <whatever.h>
......
}; 

 

Question:
What is the difference between run time binding and compile time binding? Discuss.



I guess this is about dynamic binding and static binding.

Dynamic Binding : 
The address of the functions are determined at runtime rather than @ compile time. This is also known as "Late Binding".

Static Binding :
The address of the functions are determined at compile time rather than @ run time. This is also known as "Early Binding"


Did you find this answer/comment useful ?        
 
ramaseshan   posted 10-25-2001 02:43 AM ET (US) 
--------------------------------------------------------------------------------
11 of 22 people found this post useful.
Static binding in C++ is achieved through Operator overloading where as runtime binding is achieved through virtual functions.


In static binding,the compiler decides which function to invoke during compile time itself. 

Did you find this answer/comment useful ?        
 
Mars   posted 04-08-2002 11:05 PM ET (US) 
--------------------------------------------------------------------------------
168 of 172 people found this post useful.
Compile Time Binding : In case of operator overloading and function overloading the name of the function is resolved during the compile time . Even if there are two or more functions with the same name the compiler mangles the name so that each function is uniquely identified . This has to be resolved at compile time and is known as compile-time binding or early binding.

Run Time Binding : In case of polymorphism (virtual functions) if a base class pointer(or reference) is allocated a pointer(or reference) of derived class the actual function called is determined only during runtime through the virtual table entry . This is runtime binding or late binding


Question:
Compare and contrast C++ and Java.



java has no unions
java is more flexible
java is smaller, simpler and more reliable
java supports only single inheritance
java provides relatively simple form of concurrency
java uses implicit storage deallocation for its heap-allocated objects 

Did you find this answer/comment useful ?        
 
dasax   posted 05-24-2001 06:14 AM ET (US) 
--------------------------------------------------------------------------------
15 of 18 people found this post useful.
no operator overloading in java....
no multiple inheritance......
java is interpreted language
garbage collection happens in java
more object oriented than C++... as even the main function is also in a class....


Did you find this answer/comment useful ?        
 
minks   posted 12-15-2001 10:11 AM ET (US) 
--------------------------------------------------------------------------------
123 of 124 people found this post useful.
1>Platform Independent : Java code is said to be a multiplatform code and can run on any platform because after the compilation of the source code byte code(s) are created rather than a binary code so it can run on any platform which supports JVM concept but on the contrast at time(s) it slows down the application tremendously 

2> Garbage Collection : Java handles freeing up of the memory but this is not guranteed since the GC thread has the lowest priority 

3>Operator Overloading : is not provided in Java,but what are the advantages of Operator Overloading but one may question what are its advantages, well it makes a more readable and a modular code. In c++ cin and cout objects can also be overloaded which again leads to a better readability and flexibility 

4> Multiple Inheritance : Java does provide multiple inheritance in form of Interfaces, In Java a class can not inherit from more than one class but it definitely can implement any number of interfaces

5> Templates: in c++ give such a lot of flexibility and avoids redundant coding which again is not provided by Java


Did you find this answer/comment useful ?        
 
saurabh   posted 04-02-2002 04:09 AM ET (US) 
--------------------------------------------------------------------------------
13 of 17 people found this post useful.
Well, I don't agree with java not having Templates like C++. Actually java does provide that feature with a different name, we can get the same feature using wrapper classes in java. 

 
Question:
Why does C/C++ give better run-time performance then Java?



That's because the Java bytecode is interpreted, not compiled. Programs
written in C are compiled into binaries which can be executed by a specific computer processor. Programs
written in Java require one more step -- they must be interpreted by the Java "virtual machine" before running
on a particular computer architecture. As a result, a computer running a Java program has to execute more
machine-language instructions to do the same amount of work than a computer running an equivalent
program written in C. 


Question:
Does C++ come with in-built threading support.


No. C++ does not support in-built Multithreading. To do so, you must use the operating system functions manually. 

Did you find this answer/comment useful ?        
 
Venu   posted 07-04-2002 10:09 AM ET (US) 
--------------------------------------------------------------------------------
11 of 17 people found this post useful.
Better use pthread library. 

 


Question:
Class A derived B derived C. All have foo(). I cast C to A and call foo(). What happens?


foo() for class C will be called. 

Did you find this answer/comment useful ?        
 
zeuscony   posted 04-30-2001 06:05 PM ET (US) 
--------------------------------------------------------------------------------
53 of 57 people found this post useful.
it depends. if in A foo is defined as virtual function. then call C's foo(),
if it doesn't defined virtual, then
call A's foo() 

Did you find this answer/comment useful ?        
 
Venu   posted 07-04-2002 10:08 AM ET (US) 
--------------------------------------------------------------------------------
56 of 63 people found this post useful.
Actually, if access is NOT specified, it deafults to private derivation. In private derivation, binding is static. So, whether foo is declared virtual or not it still defaults to static binding. So, A->foo() is called. 

However, If a public derivation is specified from C <-- B and B <-- A, then if foo() is virtual C->foo() is called; if foo() is non virtual A->foo() is called. 

 


Question:
All classes A, B, C have default constructor, foo() that calls parent foo() and allocates 100 bytes to their own private local variable, and a destructor that frees the 100 bytes. I create a C object and then destroy it. What's the problem? Did all the memory get freed? What if I create C, cast to A, and then destroy it. How would I make sure memory is freed? (destructor must be "virtual" and each destructor must call parent destructor)



In this case all memory will not be freed.

To avoid this problem declare the destructor as Virtual. 

Did you find this answer/comment useful ?        
 
Dhiraj Nilange   posted 10-31-2001 01:53 AM ET (US) 
--------------------------------------------------------------------------------
26 of 37 people found this post useful.
Such questions are in themeselves puzzle without demonstration. so they should be asked with sample code given lest they wont be clear. 

 



Question:
What errors are caught at compile time vs link time?


Code errors. 

Did you find this answer/comment useful ?        
 
sonic2001   posted 02-14-2001 12:58 AM ET (US) 
--------------------------------------------------------------------------------
3 of 19 people found this post useful.
Code errors. 

Did you find this answer/comment useful ?        
 
amolh   posted 02-18-2001 01:30 AM ET (US) 
--------------------------------------------------------------------------------
132 of 134 people found this post useful.
Syntactical and symantical errors (code errors) are caught at compile time.

Dependency errors (for example resolving function calls or errors in including other modules) are caught at link time. 

 



Question:
What is the value of "a" after this?
int (*a) [10];
a++;


20 assuming that the size of an int is 2 

Did you find this answer/comment useful ?        
 
octav_timofte   posted 03-08-2001 10:54 AM ET (US) 
--------------------------------------------------------------------------------
90 of 112 people found this post useful.

int (*a)[10]; represents the declaration of a pointer to an array of ten integers. So the value of a is initially some address allocated by the compiler and don't rely on the fact the address is 0 as it happens for static variables. 
The value can be zero if you add the "static" keyword in front of declaration but I don't advise you to further use this pointer to access some elements.

If the integer is n bytes ( 2 or 4 depending on the language) it is true that the value of a will be increase with 10*n.

Test this program to understand:

#include <stdio.h>

void main(int argc,char*argv[])
{
int b[10]={1,2,3,4};
int (*a)[10];
printf("%p\n",a);
printf("%d\n",(*a)[0]);
a++;
printf("%p\n",a);
a=&b;
printf("%p\n",a);
printf("%d\n",(*a)[0]);
} 

 


Question:
What is wrong with this?
main(){
int *ptr;
*ptr=10;
}


The memory is not allocated...before assigning it a value 

Did you find this answer/comment useful ?        
 
monkeyboy   posted 04-14-2001 01:47 AM ET (US) 
--------------------------------------------------------------------------------
7 of 35 people found this post useful.
jinal,.... 
I dont think so.... the snippet should run fine.... 

Did you find this answer/comment useful ?        
 
Glottis   posted 04-30-2001 05:31 PM ET (US) 
--------------------------------------------------------------------------------
19 of 25 people found this post useful.
Geniuses... 'ptr' is an uninitialized pointer. Results are unpredictable but will most likely result in an invalid memory access (write). 

Did you find this answer/comment useful ?        
 
js_sandiego   posted 10-01-2001 05:37 PM ET (US) 
--------------------------------------------------------------------------------
8 of 32 people found this post useful.
Looks fine to me, most compilers should be happy with it. The memory for ptr is implicitly allocated, and will be deallocated once out of scope (by garbage collector). Trick question. 

Did you find this answer/comment useful ?        
 
1mahesh   posted 10-02-2001 09:02 PM ET (US) 
--------------------------------------------------------------------------------
2 of 19 people found this post useful.
js is right.
It should work fine. 

Did you find this answer/comment useful ?        
 
Dhiraj Nilange   posted 10-31-2001 01:59 AM ET (US) 
--------------------------------------------------------------------------------
111 of 114 people found this post useful.
Actual reality is like this. When the pointer is declared it contains some garbage value as u know. Conceptually speaking it points to location indicated by that "garbage memory address". Now when we assign some value to *a ; i.e.
*a=12;
we are trying to place 12 in the memory cell number indicated by 'a' ; which in this case is any random memory address because it is garbage. So the program will be compiled fine. But when run ; if the garbage value assigned to 'a' is invalid (or restricted by OS) memory address ; the OS will generate error. So its upto OS.

But technically program is fine.
-Dhiraj


Did you find this answer/comment useful ?        
 
vira   posted 03-17-2002 09:29 PM ET (US) 
--------------------------------------------------------------------------------
3 of 10 people found this post useful.
The program is fine I run it.

About the garbage memory being restricted. I think the compiler will take care of it and the program should run fine in any case.


Did you find this answer/comment useful ?        
 
manoj_rn   posted 03-20-2002 07:19 AM ET (US) 
--------------------------------------------------------------------------------
7 of 7 people found this post useful.
Dhiraj is right. The program tries to write into some garbage location. The result will be unpredictable.

It might not cause any problems in the case of such a small program, but if such code is part of a larger program running on a system with limited memory, u will almost always get a run-time error. 

Did you find this answer/comment useful ?        
 
saurabh   posted 04-03-2002 04:23 AM ET (US) 
--------------------------------------------------------------------------------
1 of 7 people found this post useful.
Well....Apparently Dhiraj is always right..... :)

good job Dhiraj (Dhiraj means patience) 

Did you find this answer/comment useful ?        
 
Brahmaji B S   posted 04-15-2002 03:32 AM ET (US) 
--------------------------------------------------------------------------------
9 of 9 people found this post useful.
We are trying to place the value 10 in no location at all. Where is the space reserved for it, in the first place? Even if u r successful in placing it, u will be able to access it, only if it is a legal address. But u run the risk of corrupting another memory location. 

This shud work:

Either p shud be malloc()'ed or calloc() or realloc()ed .

Or p shud be made to point to an existing variable. 

Did you find this answer/comment useful ?        
 
yahon   posted 05-14-2002 05:19 PM ET (US) 
--------------------------------------------------------------------------------
4 of 15 people found this post useful.
Gentlemen....

What is all of this twaddle????
programming is an engineering discipline, there is a correct answer that is not arrived at by guess work.

the question
main()
{
int *ptr;
*ptr=10;
} 

answer
1) incorrect and will not compile, lets rewrite as:

int main(int argc, char *argv[])
{
int *ptr;
*ptr = 10;

}

2) anyone with even a passing familiarity with C can plainly see that ptr is uninitialized and as such attempting to write to the memory location pointed to by ptr is undefined.


Did you find this answer/comment useful ?        
 
yahon   posted 05-14-2002 05:22 PM ET (US) 
--------------------------------------------------------------------------------
5 of 19 people found this post useful.
Gentlemen....

What is all of this twaddle????
programming is an engineering discipline, there is a correct answer that is not arrived at by guess work.

the question
main()
{
int *ptr;
*ptr=10;
} 

answer
1) incorrect and will not compile, lets rewrite as:

int main(int argc, char *argv[])
{
int *ptr;
*ptr = 10;
return 0;
}

2) anyone with even a passing familiarity with C can plainly see that ptr is uninitialized and as such attempting to write to the memory location pointed to by ptr is undefined.


Did you find this answer/comment useful ?        
 
Venu   posted 07-04-2002 10:44 AM ET (US) 
--------------------------------------------------------------------------------
8 of 10 people found this post useful.
This program compiles fine. But, has unpredictable behaviour at run time (that's what Dhiraj is telling). If it runs once does not mean it will run again. The behaviour is unpredictable. 


 
Question:
Given int n, i=10, j=20, x=3, y = 100; 
What is the value of n and y at the end of each of the following expressions?
a) n = (i > j) && (x < ++y);
b) n = (j - i) && (x < y++);
c) n = (i < j) 



1> n = 0, y = 100, second condition will not be evaluated.

2> n = 1, y = 101

3> n = 1, y = 100 



Question:
int x = 5; 
int y = 7; 
What is the value of x and y after the expression y+=x++;


Y = 12 and X = 6
Why? because X will be incremented after y = Y+X has been carried out and result has been assigned to Y. 

Did you find this answer/comment useful ?        
 
Mohit   posted 05-24-2002 11:51 PM ET (US) 
--------------------------------------------------------------------------------
18 of 22 people found this post useful.
Yes Y = 12 and X = 6
if it would have been y+=++x then the value of y would have been equal to 13 and x = 6
I am sure about this
Mohit


 
Question:
What's the difference between C and C++?


c++ is C with Classes hence C++ 
while in c the closest u can get to an User defined data type is struct and union 

Did you find this answer/comment useful ?        
 
smartyrc   posted 04-18-2001 06:15 PM ET (US) 
--------------------------------------------------------------------------------
47 of 54 people found this post useful.
C does not have a class/object concept.

C++ provides data abstraction, data encapsulation, Inheritance and Polymorphism.

C++ supports all C syntax.

In C passing value to a function is 
"Call by Value" whereas in C++ its "Call by Reference"

File extention is .c in C while .cpp in C++.(C++ compiler compiles the files with .c extention but C compiler can not!)

In C structures can not have contain functions declarations. In C++ structures are like classes, so declaring functions is legal and allowed.

C++ can have inline/virtual functions for the classes. 

Did you find this answer/comment useful ?        
 
mahu   posted 10-25-2001 07:13 PM ET (US) 
--------------------------------------------------------------------------------
6 of 23 people found this post useful.
Please see "The complete referrence C++" by Herbert Schildt, third edtion page 623 for right answer. 

Did you find this answer/comment useful ?        
 
chantu   posted 01-13-2002 03:37 AM ET (US) 
--------------------------------------------------------------------------------
49 of 51 people found this post useful.
In addition to Herbert Schildt book these are few differences.

C is Top Down Approach
C++ is Bottom Up Programming approach.

C does not support OOP (Object Oriented Programming) and do not support PolyMorphism, Inheritence, Encapsulation, Function OverLoading.

Some common C style commands and there corresponding C++ style commands are shown below.

Console I/O 
***********
C
===
printf("Hello World!\n");
scanf("%s", name); 
C++
===
cout << "Hello World!" << endl;
cin >> name; 

Comments 
********
C
===
/* comment */ 
C++
=== 
// comment 

File extensions 
***************
C
===
.c, .h 
C++
===
.C, .h, .CPP, .HPP 

File I/O 
*********
C
===
out = fopen("output_file.dat", "wb");
in = fopen("input_file.dat", "rb"); 
C++
===
ofstream out("output_file.dat");
ifstream in("input_file.dat");
Dynamic Memory 
**************
C 
===
text = (char *) malloc(1000);
free(text); 
C++
===
text = new char[1000];
delete [] text; 

Constants 
*********
C
===
#define PI 3.14159 
C++
===
const float PI = 3.14159; 

Macros 
******
C
=== 
#define MAX(a,b) ((a) > (b) ? (a) : (b)) 
C++
===
inline int MAX(int a, int b) { return a > b ? a : b; } 




Did you find this answer/comment useful ?        
 
vira   posted 03-17-2002 09:58 PM ET (US) 
--------------------------------------------------------------------------------
53 of 61 people found this post useful.
A slight correction.

some one said 

A function call in 
C is call by value, while in C++ it is call by reference.



Question:
What does Public and Private mean in C++



Public:
Makes class memebrs accessible outside the class. It can be accessed in the C code.
Private:
Makes the members specified accessible only to the class and it's functions. 

Did you find this answer/comment useful ?        
 
chantu   posted 01-13-2002 02:43 AM ET (US) 
--------------------------------------------------------------------------------
13 of 14 people found this post useful.
public - Anyone can access the method/variable 
protected - The method/variable can only be accessed by classes which inherit from the class in which the method/variable is declared. 
private - The method/variable can only be accessed from within the class where it is declared. 

Did you find this answer/comment useful ?        
 
sapyo   posted 05-05-2002 09:02 PM ET (US) 
--------------------------------------------------------------------------------
20 of 20 people found this post useful.

public / private have two different meanings in C++.

1. To specify the access privilege of the class members.

2. To specify what type of inheritance.


 



Question:
Is it possible to keep 2 stacks in a single array, if one grows from position one of the array, and the other grows from the last position. Write a procedure PUSH(x,s) that pushes element x onto stack S, where S is one or the other of these two stacks. Include all necessary error checks (Sent by Puneet Saraf)




Its better to use nodes here - in this way you use what is called the dynamic data structure. This means the size of the structure grows at run time.

Start by defining a pointer to node structure.
each node has a data field and pointer field 

Did you find this answer/comment useful ?        
 
jobhunter   posted 11-07-2001 12:57 AM ET (US) 
--------------------------------------------------------------------------------
41 of 51 people found this post useful.
The question did not ask for a suggestion. It is definitely possible to implement 2 stacks using a single array. The array shud be visible to both stacks (and therefore be global, or shud provide equivalent effect). Also the stack tops shud be taken care of. one top will decrement everytime the push method is called and one would be incremented. As soon as s1.top==s2.top we shud throw an exception.


 




C supports only call by value that's true..
but C++ supports both call by value and call by reference not just call by reference.


 

 




 








