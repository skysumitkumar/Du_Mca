<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0061)http://comp.uark.edu/~vchaudh/old_home_page/repository/c.html -->
<HTML xmlns="http://www.w3.org/TR/REC-html40" xmlns:v = 
"urn:schemas-microsoft-com:vml" xmlns:o = 
"urn:schemas-microsoft-com:office:office" xmlns:w = 
"urn:schemas-microsoft-com:office:word"><HEAD><TITLE>HOT interview questions on C++ fundamentals</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content=Word.Document name=ProgId>
<META content="MSHTML 6.00.2600.0" name=GENERATOR>
<META content="Microsoft Word 9" name=Originator><LINK 
href="./C_plus_plus_questions_files/filelist.xml" rel=File-List><LINK 
href="./C_plus_plus_questions_files/editdata.mso" rel=Edit-Time-Data><!--[if !mso]>
<STYLE>v\:* {
	BEHAVIOR: url(#default#VML)
}
o\:* {
	BEHAVIOR: url(#default#VML)
}
w\:* {
	BEHAVIOR: url(#default#VML)
}
.shape {
	BEHAVIOR: url(#default#VML)
}
</STYLE>
<![endif]--><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Vivek Chaudhary</o:Author>
  <o:LastAuthor>Vivek Chaudhary</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>84</o:TotalTime>
  <o:LastPrinted>2002-07-27T18:40:00Z</o:LastPrinted>
  <o:Created>2002-07-27T19:37:00Z</o:Created>
  <o:LastSaved>2002-07-27T19:37:00Z</o:LastSaved>
  <o:Pages>20</o:Pages>
  <o:Words>5906</o:Words>
  <o:Characters>33669</o:Characters>
  <o:Company>Mixed Signal Lab, UA</o:Company>
  <o:Lines>280</o:Lines>
  <o:Paragraphs>67</o:Paragraphs>
  <o:CharactersWithSpaces>41347</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<STYLE>@page Section1 {size: 8.5in 11.0in; margin: 1.0in 1.25in 1.0in 1.25in; mso-header-margin: .5in; mso-footer-margin: .5in; mso-paper-source: 0; }
P.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 0pt; COLOR: windowtext; FONT-FAMILY: "Times New Roman"; mso-style-parent: ""; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"
}
LI.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 0pt; COLOR: windowtext; FONT-FAMILY: "Times New Roman"; mso-style-parent: ""; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"
}
DIV.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0in 0in 0pt; COLOR: windowtext; FONT-FAMILY: "Times New Roman"; mso-style-parent: ""; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"
}
H1 {
	FONT-WEIGHT: bold; FONT-SIZE: 24pt; MARGIN-LEFT: 0in; COLOR: windowtext; MARGIN-RIGHT: 0in; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-outline-level: 1; mso-font-kerning: 18.0pt
}
H2 {
	FONT-WEIGHT: bold; FONT-SIZE: 18pt; MARGIN-LEFT: 0in; COLOR: windowtext; MARGIN-RIGHT: 0in; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-outline-level: 2
}
H3 {
	FONT-WEIGHT: bold; FONT-SIZE: 13.5pt; MARGIN-LEFT: 0in; COLOR: windowtext; MARGIN-RIGHT: 0in; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-outline-level: 3
}
H4 {
	FONT-WEIGHT: bold; FONT-SIZE: 12pt; MARGIN-LEFT: 0in; COLOR: #ffffcc; MARGIN-RIGHT: 0in; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-outline-level: 4
}
A:link {
	COLOR: #7e0517; TEXT-DECORATION: underline; text-underline: single
}
SPAN.MsoHyperlink {
	COLOR: #7e0517; TEXT-DECORATION: underline; text-underline: single
}
A:visited {
	COLOR: purple; TEXT-DECORATION: underline; text-underline: single
}
SPAN.MsoHyperlinkFollowed {
	COLOR: purple; TEXT-DECORATION: underline; text-underline: single
}
P {
	FONT-SIZE: 12pt; MARGIN-LEFT: 0in; COLOR: black; MARGIN-RIGHT: 0in; FONT-FAMILY: "Times New Roman"; mso-pagination: widow-orphan; mso-fareast-font-family: "Times New Roman"; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto
}
DIV.Section1 {
	page: Section1
}
</STYLE>
</HEAD>
<BODY lang=EN-US style="tab-interval: .5in" vLink=purple link=#7e0517>
<DIV class=Section1>
<H2 style="TEXT-ALIGN: center" align=center><SPAN 
style="FONT-SIZE: 12pt; mso-bidi-font-size: 10.0pt">HOT interview questions on 
C++ fundamentals<o:p></o:p></SPAN></H2>
<P class=MsoNormal 
style="TEXT-ALIGN: center; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto" 
align=center>Here we will cover the following topics.</P>
<P class=MsoNormal 
style="TEXT-ALIGN: center; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto" 
align=center>&nbsp;</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">1.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Copy 
constructor</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">2.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Virtual 
destructor</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">3.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</SPAN>Constructor’s return parameter</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">4.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Pure 
virtual function and Abstract class</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;<B 
style="mso-bidi-font-weight: normal"><U>Constructors and Copy 
Constructor:</U></B> Constructors are special type of member function in a class 
which has the same name as the class itself. Constructor with no parameter is 
called default constructor. Any number of constructors can be declared and 
overloaded. Copy Constructor is a typical overloaded constructor that can accept 
a single argument of reference to same class type. The significance of this 
specific constructor is pretty high in the OO design aspect. There are several 
FAQs on this topic some of which are described and explained below.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;FAQS:</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;1.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Does a 
class provide default Copy Constructor?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">2.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>What 
does default Copy Constructor do?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">3.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Can a 
program have a virtual constructor?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">4.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>When 
does a programmer need to implement his own copy constructor?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">5.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Can a 
copy constructor accept an object of the same class, instead of reference of the 
object?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">6.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>What is 
the return parameter of a constructor and why?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">7.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Are the 
“default constructor” and “constructor with default parameter” same?</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;<B 
style="mso-bidi-font-weight: normal"><U>Resolutions:<o:p></o:p></U></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;<B>1.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Does a class 
provide default Copy Constructor?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">Yes! 
The default copy constructor is being provided automatically by the compiler if 
not implemented separately. In this, it puts the code for copying the data 
members and other variables that stay in stack. If something is being created by 
malloc or new in the heap, those are not being copied by the default copy 
constructor provide by the compiler.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;<B>2.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>What does a 
default Copy Constructor do?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;A default 
copy constructor is being provided by the compiler, when an attempt to copy an 
existing object is made. In this case the control goes to the default copy 
constructor. It generates a new object, and makes the values of data members of 
the new object which are in the stack, same as the parent object. It doesn’t 
copy the variables that are created in the heap. Simply speaking, a compiler 
supplied default copy constructor doesn’t take care of the things in an object, 
that are being created using malloc/calloc or new.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;<B>3.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Can a program 
have a virtual constructor?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;Generally we 
don’t need an overridable constructor. So constructor should not be declared as 
virtual. But in a class, we can make a static method, which will call the 
private/protected constructor and create an object. In that case the constructor 
is called as virtual constructor.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;<B>4.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>When does a 
programmer need to implement his own copy constructor?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;Though 
compiler automatically provides the default copy constructor, sometime a 
programmer needs to implement his own copy constructor. We can take up a case 
here:</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">In the default 
constructor some memory allocation has been done for few data members and hence 
those will be created in the heap. In the destructor corresponding de-allocation 
code is there. Now if an attempt to copy an object is made, it won’t call the 
default constructor but it will call the default copy constructor which will 
copy the data member variable from stack and copy the pointers but won’t 
allocate any new memory space for the new copied object. So same pointers will 
exist in both the parent and copied object. This will not only create a great 
ambiguity but runtime error will occur when attempts will be made to delete both 
the objects. First object will get deleted properly. When it will try to delete 
the other object, the common pointer won’t exist and runtime error will come. 
Even if user stops the application it will try to delete all the objects in the 
memory and runtime error will occur. In a single word, copy constructor is 
needed to be implemented independently, when the parent object has some 
allocated memory in heap for some of its data member and that gets deleted by 
destructor. Copy constructor should consist that much of code for memory 
allocation for the newly created object.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;Apart from 
this, programmer can implement his own copy constructor to copy any other 
things, which he wants specifically.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in">5.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><B>Can a 
copy constructor accept an object of the same class as parameter, instead of 
reference of the object?</B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">No. It is 
specified in the definition of the copy constructor itself. It should generate 
an error if a programmer specifies a copy constructor with a first argument that 
is an object and not a reference.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">Logically 
thinking, if we can consider the same as copy constructor also, big confusion 
will come. If we pass an object as a function parameter, by value, it will get 
copied first and then be passed to the function. At the time of getting copied 
it should call the copy constructor. So in this case, if we consider the above 
described constructor as copy constructor, at the very beginning of the function 
call, it wil attempt to copy the object and hence again call the same function 
and hence will go towards an infinite loop. This will probably be ended up with 
an unexpected stack overflow.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">It will give 
compiler error if an object of the same class is being passed to a constructor, 
but it doesn’t give error if more than one different objects are being passed to 
the constructor . In this case it doesn’t treat it as copy constructor, but a 
normal overloaded constructor.</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in"><B>6.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>What is the 
return parameter of a constructor and why?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">Constructor in 
never being called directly. It is being called automatically by the compiler 
when an object in being created (or copied). Hence it can’t return any 
parameter. Logically thinking, if it would have been made to return a parameter, 
how do we put the code to create an object?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in"><B>7.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Are the 
“default constructor” and “constructor with default parameter” 
same?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">Default 
constructor is a constructor, which can be called with no argument. So a 
constructor with all the parameters as default argument can be called as default 
constructor. A constructor with one or more default parameters (but not all the 
parameters) can be called “constructor with default parameter” but that won’t be 
the default constructor.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">If a constructor 
with no argument and a constructor with all default arguments are being 
implemented then object-creation will generate an ambiguity regarding which 
constructor is to be called.</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto"><B 
style="mso-bidi-font-weight: normal"><U>Destructor :</U></B> Destructor function 
can be treated as the<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>inverse of 
constructor functions. They are called when objects are destroyed (de-allocated) 
or program exits from application. Designate a function as a class’s destructor 
by preceding the class name with a tilde (<B 
style="mso-bidi-font-weight: normal">~</B>). There are several FAQs that a 
programmer comes across, some of which are explained below:</P>
<H1><SPAN style="FONT-SIZE: 12pt; mso-bidi-font-size: 24.0pt"><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></SPAN></H1>
<H1><SPAN 
style="FONT-SIZE: 12pt; mso-bidi-font-size: 24.0pt">FAQs:<o:p></o:p></SPAN></H1>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.5in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .5in">1.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>When and 
in what condition a destructor is called?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.5in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .5in">2.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>When 
does a programmer need a virtual destructor?</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.5in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .5in">3.<SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Does a 
destructor have some function parameter or return parameter?</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">&nbsp;</P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto"><B 
style="mso-bidi-font-weight: normal"><U>Resolutions:<o:p></o:p></U></B></P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in"><B>1.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>When and in 
what condition a destructor is called?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">There is only one 
destructor exists for a class. There can be two condition when the destructor is 
called. When attempt is made to delete the object and when user closes the 
application. When the application is being closed, all the objects are being 
deleted first and destructor corresponding to all the objects are called.</P>
<P class=MsoNormal 
style="MARGIN-LEFT: 0.25in; TEXT-INDENT: -0.25in; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; tab-stops: list .25in"><B>2.</B><B><SPAN 
style="mso-bidi-font-size: 7.0pt">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>When does a 
programmer need a virtual destructor?<o:p></o:p></B></P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">A good design 
should provide scope to override the destructors of all the classes. Destructor 
is the function that controls </P>
<P class=MsoNormal 
style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto">Pure virtual 
function and Abstract class: Pure virtual functions are the functions that are 
not being implemented in the class where it is being defined. An abstract class 
is a class that contains one or more than one pure virtual functions.</P>
<P class=MsoNormal style="TEXT-ALIGN: center" align=center><B><SPAN 
style="mso-bidi-font-size: 13.5pt">Tough Interview 
Questions</SPAN></B><BR><B>General Questions</B> <SPAN 
style="mso-bidi-font-size: 10.0pt"><o:p></o:p></SPAN></P>
<P class=MsoNormal><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">1. Tell me about 
you!</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Keep your answer to one or two 
minutes; don't ramble. Use your resume summary as a base to start. 
<o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">2. What do you know about our 
company?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Do your homework before the 
interview! Spend some time online or at the library researching the company. 
Find out as much as you can, including products, size, income, reputation, 
image, management talent, people, skills, history and philosophy. Project an 
informed interest; let the interviewer tell <I>you</I> about the company. 
<o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">3. Why do you want to work for 
us? </SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"><o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Don't talk about what you want; 
first, talk about their needs: You would like to be part of a specific company 
project; you would like to solve a company problem; you can make a definite 
contribution to specific company goals. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">4. What would you do for us? What 
can you do for us that someone else can't?</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Relate past experiences that show 
you've had success in solving previous employer problem(s) that may be similar 
to those of the prospective employer. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">5. What about the job offered do 
you find the most attractive? Least attractive?</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">List three or more attractive 
factors and only one minor unattractive factor. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">6. Why should we hire you? 
</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"><o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Because of your knowledge, 
experience, abilities and skills. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">7. What do you look for in a 
job?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">An opportunity to use your skills, 
to perform and be recognized. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">8. Please give me your definition 
of a .... (the position for which you are being interviewed).</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Keep it brief -- give an action- and 
results-oriented definition. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">9. How long would it take you to 
make a meaningful contribution to our firm?</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Not long at all -- you expect only a 
brief period of adjustment to the learning curve. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">10. How long would you stay with 
us?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">As long as we both feel I'm 
contributing, achieving, growing, etc. <o:p></o:p></SPAN></P>
<P style="TEXT-ALIGN: center" align=center><B><SPAN 
style="mso-bidi-font-size: 13.5pt">Tough Interview Questions</SPAN></B><SPAN 
style="mso-bidi-font-size: 13.5pt"><BR></SPAN><B>Personality Questions</B></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">1. Do you generally speak to 
people before they speak to you?</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">It depends on the circumstances. 
<o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">2.What was the last book you 
read? Movie you saw? Sporting event you attended?</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Talk about books, sports or films to 
show that you have balance in your life. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">3. What is the toughest part of a 
job for you?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Be honest. Remember, not everyone 
can do everything. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">4. Are you 
creative?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Yes. Give examples that relate to 
your current job.<o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">5. How would you describe your 
own personality?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Balanced is a good word to use, but 
remember the type of company you are interviewing at. Some companies may want 
someone who is aggressive and a go-getter.<o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">6. Are you a 
leader?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Absolutely! Cite specific examples 
using your current job as a reference point. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">7. What are your future 
goals?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Avoid, "I would like the job you 
advertised." Instead, give long-range goals. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">8. What are your 
strengths?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Present at least three and relate 
them to the company and job you are interviewing for. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">9. What are your 
weaknesses?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Don't say that you don’t have any. 
Try not to cite personal characteristics as weaknesses, but be ready to have one 
if the interviewer presses. Turn a negative into a positive answer: "I am 
sometimes intent on completing an assignment and get too deeply involved when we 
are late." <BR style="mso-special-character: line-break"><![if !supportLineBreakNewLine]><BR 
style="mso-special-character: line-break"><![endif]><o:p></o:p></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: center" align=center><B><SPAN 
style="mso-bidi-font-size: 13.5pt">Tough Interview 
Questions</SPAN></B><BR><B>Your Career Goals</B> <SPAN 
style="mso-bidi-font-size: 10.0pt"><o:p></o:p></SPAN></P>
<P class=MsoNormal><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">1. If you could start your career 
again, what would you do differently?</SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"> <o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Nothing ... I am happy today, so I 
don't want to change my past. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">2. What career options do you 
have at the moment?</SPAN></B><SPAN style="mso-bidi-font-size: 10.0pt"> 
<o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">"I see three areas of interest..." 
Relate those to the position and industry. <o:p></o:p></SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">3. How would you describe the 
essence of success? According to your definition of success, how successful have 
you been so far? </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt"><o:p></o:p></SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Think carefully about your answer 
and relate it to your career accomplishments. <o:p></o:p></SPAN></P>
<H3><SPAN 
style="FONT-SIZE: 12pt; COLOR: #003366; mso-bidi-font-size: 13.5pt">Wanted: 
Senior C++ Programmer</SPAN><SPAN 
style="FONT-SIZE: 12pt; mso-bidi-font-size: 13.5pt"><o:p></o:p></SPAN></H3>
<H4><I><SPAN style="COLOR: #333366">by Al Stevens</SPAN></I></H4>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The questions are in three 
categories: </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">* The first category probes whether 
applicants have a rudimentary understanding of the differences between C and 
C++. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">* The second category examines their 
grasp of class design. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">* The third determines how well they 
have kept abreast of language changes that the ANSI committee has proposed and 
approved. </SPAN></P>
<H3><SPAN style="FONT-SIZE: 12pt; COLOR: #003366">Questions to Qualify an 
Applicant</SPAN><SPAN 
style="FONT-SIZE: 12pt; mso-bidi-font-size: 13.5pt"><o:p></o:p></SPAN></H3>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Do you have a basic understanding of C and 
C++ and their similarities and differences? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Yes. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">If the answer is "yes," proceed and 
plan to ask all the questions in the first group. If not, the interview for a 
C++ programmer's job should be over, and you should be talking about other 
employment opportunities. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Have you participated in the design of C++ 
classes to support an application's problem domain? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Yes or No. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">If the answer is "yes," plan to 
include the questions in the second group. Applicants usually want to describe 
the details of the systems they have designed. Pay attention if you understand 
the nature of the application. If not, pretend to pay attention. If they have 
not actually done any class design, ask if they think they understand it. If so, 
include the second set of questions. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Do you keep up with what the ANSI C++ 
Standards committee is doing? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Yes or No. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Most people do not. Few people have 
the time. But occasionally there is that rare soul who reads all the magazines 
and books, owns a copy of the draft standard, and regularly tracks the C++ news 
groups on the net. If an applicant claims to be one of them, include the third 
group of questions in your interrogation. </SPAN></P>
<H4><SPAN style="COLOR: #333366; mso-bidi-font-size: 10.0pt">Questions for All 
Applicants</SPAN></H4>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Here's the first group of questions 
and my opinions about what some acceptable answers would be. These questions do 
not cover C++ wall-to-wall, of course. I selected them as typical of the kind of 
knowledge that all C++ programmers should be expected to possess. There are five 
questions. Three correct answers is a good score. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">How do you link a C++ program to C functions? 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">By using the extern "C" linkage specification 
around the C function declarations. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Programmers should know about 
mangled function names and type-safe linkages. Then they should explain how the 
<I>extern "C"</I> linkage specification statement turns that feature off during 
compilation so that the linker properly links function calls to C functions. 
Another acceptable answer is "I don't know. We never had to do that." Merely 
describing what a linker does indicates that the programmer does not understand 
the issue that underlies the question. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Explain the scope resolution operator. 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">It permits a program to reference an 
identifier in the global scope that has been hidden by another identifier with 
the same name in the local scope. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The answer can get complicated. 
However, it should start with "::". If the programmer is well into the design or 
use of classes that employ inheritance you might hear a lot about overriding 
member function overrides to explicitly call a function higher in the hierarchy. 
That's good to know, but ask specifically about global scope resolution. You're 
looking for a description of C++'s ability to override the particular C behavior 
where identifiers in the global scope are always hidden by like identifiers in a 
local scope. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What are the differences between a C++ 
<I>struct </I>and C++ <I>class</I>? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">The default member and base-class access 
specifiers are different. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">This is one of the commonly 
misunderstood aspects of C++. Believe it or not, many programmers think that a 
C++ <I>struct</I> is just like a C <I>struct</I>, while a C++ class has 
inheritance, access specifiers, member functions, overloaded operators, and so 
on. Some of them have even written books about C++. Actually, the C++ 
<I>struct</I> has all the features of the <I>class</I>. The only differences are 
that a <I>struct</I> defaults to public member access and public base-class 
inheritance, and a <I>class</I> defaults to the private access specifier and 
private base-class inheritance. Getting this question wrong does not necessarily 
disqualify an applicant. Getting it right is a definite plus. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Saying, "I don't know" is definitely 
the wrong answer. I advance an unusual position about this. C++ programmers 
should at least believe that they know the differences, even when they are wrong 
about them. Getting it wrong is, therefore, right. You can explain the true 
difference in the interview and advance the programmer's knowledge. If they 
disagree vociferously, you have an opportunity to observe how they handle 
contentious debate when they are wrong and don't know it yet. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">How many ways are there to initialize an 
<I>int</I> with a constant? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Two. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">There are two formats for 
initializers in C++ as shown in the example that follows. The first format uses 
the traditional C notation. The second format uses constructor notation. 
</SPAN></P>
<P><I><SPAN style="mso-bidi-font-size: 10.0pt">int foo = 123;</SPAN></I><SPAN 
style="mso-bidi-font-size: 10.0pt"> </SPAN></P>
<P><I><SPAN style="mso-bidi-font-size: 10.0pt">int bar (123);</SPAN></I><SPAN 
style="mso-bidi-font-size: 10.0pt"> </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">It's acceptable when a programmer 
does not know about the second notation, although they should certainly know 
about the first one. Many old-timer C programmers who made the switch to C++ 
never use the second idiom, although some wise heads of C++ profess to prefer 
it. If your applicant is quick with the right answer, that's a good sign. 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">How does throwing and catching exceptions 
differ from using <I>setjmp</I> and <I>longjmp</I>? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">The throw operation calls the destructors for 
automatic objects instantiated since entry to the <I>try</I> block. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Exceptions are in the mainstream of 
C++ now, so most programmers, if they are familiar with <I>setjmp</I> and 
<I>longjmp</I>, should know the difference. Both idioms return a program from 
the nested depths of multiple function calls to a defined position higher in the 
program. The program stack is "unwound" so that the state of the program, with 
respect to function calls and pushed arguments, is restored as if the calls had 
not been made. C++ exception handling adds to that behavior the orderly calls to 
the destructors of automatic objects that were instantiated as the program 
proceeded from within the <I>try</I> block toward where the <I>throw 
</I>expression is evaluated. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Applicants might think you want to 
hear about the notational differences between the two idioms. Let them proceed 
to explain the syntax of <I>try</I> blocks, <I>catch </I>exception handlers, and 
<I>throw </I>expressions. Then ask them specifically what happens in a <I>throw 
</I>that does not happen in a <I>longjmp</I>. Their answer should reflect an 
understanding of the behavior described in the previous answer. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">One valid reason for not knowing 
about exception handling is that the applicant's experience is exclusively with 
older C++ compilers that do not implement exception handling. I would prefer 
that they have at least heard of exception handling, though. Another marginally 
acceptable reason is that their former supervisors and designers did not mandate 
and specify the use of exception handling in programs. In that case get the 
names of those supervisors and designers so that you can decline their 
applications if they should come a'knocking. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">It is not unusual for C and C++ 
programmers to be unfamiliar with <I>setjmp</I>/<BR><I>longjmp</I>. Those 
constructs are not particularly intuitive. A C programmer who has written 
recursive descent parsing algorithms will certainly be familiar with 
<I>setjmp</I>/<I>longjmp</I>. Others might not, and that's acceptable. In that 
case, they won't be able to discuss how <I>setjmp</I>/<I>longjmp</I> differs 
from C++ exception handling, but let the interview turn into a discussion of C++ 
exception handling in general. That conversation will reveal a lot about a 
programmer's understanding of C++. </SPAN></P>
<P style="TEXT-ALIGN: center" align=center><!--[if gte vml 1]><v:shapetype 
id=_x0000_t75 coordsize = "21600,21600" o:preferrelative = "t" o:spt = "75" 
filled = "f" stroked = "f" path = " m@4@5 l@4@11@9@11@9@5 xe"><v:stroke 
joinstyle = "miter"></v:stroke><v:formulas><v:f eqn = 
"if lineDrawn pixelLineWidth 0 "></v:f><v:f eqn = "sum @0 1 0 "></v:f><v:f eqn = 
"sum 0 0 @1 "></v:f><v:f eqn = "prod @2 1 2 "></v:f><v:f eqn = 
"prod @3 21600 pixelWidth "></v:f><v:f eqn = 
"prod @3 21600 pixelHeight "></v:f><v:f eqn = "sum @0 0 1 "></v:f><v:f eqn = 
"prod @6 1 2 "></v:f><v:f eqn = "prod @7 21600 pixelWidth "></v:f><v:f eqn = 
"sum @8 21600 0 "></v:f><v:f eqn = "prod @7 21600 pixelHeight "></v:f><v:f eqn = 
"sum @10 21600 0 "></v:f></v:formulas><v:path o:extrusionok = "f" 
gradientshapeok = "t" o:connecttype = "rect"></v:path><o:lock aspectratio="t" 
v:ext="edit"></o:lock></v:shapetype><v:shape id=_x0000_i1025 
style="WIDTH: 225pt; HEIGHT: 7.5pt" type = "#_x0000_t75" coordsize = 
"21600,21600" alt = ""><v:imagedata src = 
"./C_plus_plus_questions_files/image001.gif" o:href = 
"http://www.softcorp.demon.co.uk/_themes/blitz/btzhsepd.gif"></v:imagedata></v:shape><![endif]--><![if !vml]><img width=300 height=10
src="./C_plus_plus_questions_files/image001.gif" v:shapes="_x0000_i1025"><![endif]></P>
<H3><SPAN style="FONT-SIZE: 12pt; COLOR: #003366">Questions for Class Designers 
</SPAN><SPAN 
style="FONT-SIZE: 12pt; mso-bidi-font-size: 13.5pt"><o:p></o:p></SPAN></H3>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The second group of questions 
explores the applicant's knowledge of class design. There are eight questions. 
Five out of eight is a good score. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is your reaction to this line of code? 
</SPAN></P>
<P><I><SPAN style="mso-bidi-font-size: 10.0pt">delete this;</SPAN></I><SPAN 
style="mso-bidi-font-size: 10.0pt"> </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">It's not a good practice. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Many applicants will look at you 
like you are nuts. They've never heard of this usage, and it's never occurred to 
them. That's a very good answer. Perhaps they will try to explain the behavior 
of the statement. Ask them to contemplate its consequences. Two quite acceptable 
reactions are, "Don't do it," and "Don't do it unless you really know what you 
are doing and you are a masochist." </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">A good programmer will insist that 
you should absolutely never use the statement if the class is to be used by 
other programmers and instantiated as static, extern, or automatic objects. That 
much should be obvious. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The code has two built-in pitfalls. 
First, if it executes in a member function for an extern, static, or automatic 
object, the program will probably crash as soon as the <I>delete</I> statement 
executes. There is no portable way for an object to tell that it was 
instantiated on the heap, so the class cannot assert that its object is properly 
instantiated. Second, when an object commits suicide this way, the using program 
might not know about its demise. As far as the instantiating program is 
concerned, the object remains in scope and continues to exist even though the 
object did itself in. Subsequent dereferencing of the pointer can and usually 
does lead to disaster. I think that the language rules should disallow the 
idiom, but that's another matter. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">In <I>More Effective C++</I> 
(Addison-Wesley, 1996), Scott Meyers devotes one of his items to "<I>delete 
this</I>," implying that there are valid applications for the idiom and 
advancing contrived code kludges to make it seem to work better. A programmer 
who has read this otherwise very good book might think that the practice is 
acceptable. Experience leads me to disagree. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is a default constructor? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">A constructor that has no arguments. 
</SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">If you don't code one, the compiler 
provides one if there are no other constructors. If you are going to instantiate 
an array of objects of the class, the class must have a default constructor. 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is a conversion constructor? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">A constructor that accepts one argument of a 
different type. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The compiler uses this idiom as one 
way to infer conversion rules for your class. A constructor with more than one 
argument and with default argument values can be interpreted by the compiler as 
a conversion constructor when the compiler is looking for an object of your 
constructor's type and sees an object of the type of the constructor's first 
argument. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is the difference between a copy 
constructor and an overloaded assignment operator? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">A copy constructor constructs a new object by 
using the content of the argument object. An overloaded assignment operator 
assigns the contents of an existing object to another existing object of the 
same class. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">First, the applicant must know that 
a copy constructor is one that has only one argument of the same type as the 
constructor. The compiler invokes a copy constructor wherever it needs to make a 
copy of the object, for example to pass an argument by value. If you do not 
provide a copy constructor, the compiler creates a member- by-member copy 
constructor for you. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">You can write overloaded assignment 
operators that take arguments of other classes, but that behavior is usually 
implemented with implicit conversion constructors. If you do not provide an 
overloaded assignment operator for the class, the compiler creates a default 
member- by-member assignment operator. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">This discussion is a good place to 
get into why classes need copy constructors and overloaded assignment operators. 
If the applicant discusses these with respect to data member pointers that point 
to dynamically allocated resources, the applicant probably has a good grasp of 
the problem. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">When should you use multiple inheritance? 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">There are three acceptable answers: "Never," 
"Rarely," and "When the problem domain cannot be accurately modeled any other 
way." </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">There are some famous C++ pundits 
and luminaries who disagree with that third answer, but I will accept it. 
</SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Let's digress to consider this issue 
lest your interview turn into a religious debate. Consider an <I>Asset</I> 
class, <I>Building</I> class, <I>Vehicle</I> class, and <I>CompanyCar</I> class. 
All company cars are vehicles. Some company cars are assets because the 
organizations own them. Others might be leased. Not all assets are vehicles. 
Money accounts are assets. Real estate holdings are assets. Some real estate 
holdings are buildings. Not all buildings are assets. Ad infinitum. When you 
diagram these relationships, it becomes apparent that multiple inheritance is a 
likely and intuitive way to model this common problem domain. The applicant 
should understand, however, that multiple inheritance, like a chainsaw, is a 
useful tool that has its perils, needs respect, and is best avoided except when 
nothing else will do. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is a virtual destructor? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">The simple answer is that a virtual 
destructor is one that is declared with the virtual attribute. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The behavior of a virtual destructor 
is what is important. If you destroy an object through a pointer or reference to 
a base class, and the base-class destructor is not virtual, the derived-class 
destructors are not executed, and the destruction might not be complete. 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Explain the ISA and HASA class relationships. 
How would you implement each in a class design? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">A specialized class "is" a specialization of 
another class and, therefore, has the ISA relationship with the other class. An 
<I>Employee ISA Person</I>. This relationship is best implemented with 
inheritance. Employee is derived from <I>Person</I>. A class may have an 
instance of another class. For example, an employee "has" a salary, therefore 
the <I>Employee</I> class has the HASA relationship with the <I>Salary</I> 
class. This relationship is best implemented by embedding an object of the 
<I>Salary</I> class in the <I>Employee</I> class. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">The answer to this question reveals 
whether the applicant has an understanding of the fundamentals of object- 
oriented design, which is important to reliable class design. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">There are other relationships. The 
USESA relationship is when one class uses the services of another. The 
<I>Employee</I> class uses an object (<I>cout</I>) of the <I>ostream</I> class 
to display the employee's name on the screen, for example. But if the applicant 
gets ISA and HASA right, you don't need to go any further. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">When is a template a better solution than a 
base class? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">When you are designing a generic class to 
contain or otherwise manage objects of other types, when the format and behavior 
of those other types are unimportant to their containment or management, and 
particularly when those other types are unknown (thus, the genericity) to the 
designer of the container or manager class. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Prior to templates, you had to use 
inheritance; your design might include a generic <I>List</I> container class and 
an application-specific <I>Employee</I> class. To put employees in a list, a 
<I>ListedEmployee</I> class is multiply derived (contrived) from the 
<I>Employee</I> and <I>List</I> classes. These solutions were unwieldy and 
error-prone. Templates solved that problem. </SPAN></P>
<H3><SPAN style="FONT-SIZE: 12pt; COLOR: #003366">Questions for 
ANSI-Knowledgeable Applicants </SPAN><SPAN 
style="FONT-SIZE: 12pt; mso-bidi-font-size: 13.5pt"><o:p></o:p></SPAN></H3>
<P><SPAN style="mso-bidi-font-size: 10.0pt">There are six questions for those 
who profess knowledge of the progress of the ANSI committee. If you claim to 
have that much interest in the language, you should know the answers to all 
these questions. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is a mutable member? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">One that can be modified by the class even 
when the object of the class or the member function doing the modification is 
<I>const</I>. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Understanding this requirement 
implies an understanding of C++ <I>const</I>, which many programmers do not 
have. I have seen large class designs that do not employ the <I>const</I> 
qualifier anywhere. Some of those designs are my own early C++ efforts. One 
author suggests that some programmers find <I>const</I> to be such a bother that 
it is easier to ignore <I>const</I> than to try to use it meaningfully. No 
wonder many programmers don't understand the power and implications of 
<I>const</I>. Someone who claims to have enough interest in the language and its 
evolution to keep pace with the ANSI deliberations should not be ignorant of 
<I>const</I>, however. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is an <I>explicit </I>constructor? 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">A conversion constructor declared with the 
explicit keyword. The compiler does not use an <I>explicit </I>constructor to 
implement an implied conversion of types. It's purpose is reserved explicitly 
for construction. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What is the Standard Template Library? 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">A library of container templates approved by 
the ANSI committee for inclusion in the standard C++ specification. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">A programmer who then launches into 
a discussion of the generic programming model, iterators, allocators, 
algorithms, and such, has a higher than average understanding of the new 
technology that STL brings to C++ programming. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Describe run-time type identification. 
</SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">The ability to determine at run time the type 
of an object by using the <I>typeid </I>operator or the <I>dynamic_cast</I> 
operator. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">What problem does the namespace feature 
solve? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Multiple providers of libraries might use 
common global identifiers causing a name collision when an application tries to 
link with two or more such libraries. The namespace feature surrounds a 
library's external declarations with a unique namespace that eliminates the 
potential for those collisions. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">This solution assumes that two 
library vendors don't use the same namespace identifier, of course. </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">Q: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Are there any new intrinsic (built-in) data 
types? </SPAN></P>
<P><B><SPAN style="mso-bidi-font-size: 10.0pt">A: </SPAN></B><SPAN 
style="mso-bidi-font-size: 10.0pt">Yes. The ANSI committee added the <I>bool</I> 
intrinsic type and its <I>true </I>and <I>false </I>value keywords. </SPAN></P>
<P><SPAN style="mso-bidi-font-size: 10.0pt">Other apparent new types (string, 
complex, and so on) are implemented as classes in the Standard C++ Library 
rather than as intrinsic types. </SPAN></P>
<H4><SPAN style="COLOR: #333366; mso-bidi-font-size: 10.0pt">What Not to 
Do</SPAN></H4>
<H2><SPAN style="FONT-SIZE: 12pt; mso-bidi-font-size: 18.0pt">The C++ 
Interview<o:p></o:p></SPAN></H2>
<H3><SPAN style="FONT-SIZE: 12pt; mso-bidi-font-size: 13.5pt">These 40 questions 
and answers will help you land the assignment<o:p></o:p></SPAN></H3>
<P><I>by Alex Bykov</I></P>
<P><B>How do you rank your C++ skills on a scale of 1 to 10?</B> </P>
<P>This is often the first question you will hear on an interview for a C++ 
contract. You will be tempted to rate yourself high, and you should. This is 
your chance to convince the client that you are just what he is looking for--an 
assertive and knowledgeable professional who will be productive either working 
on a team or on your own. Naturally, though, you should be able to support the 
ranking you gave yourself by doing well on the interview. This article will help 
you prepare for your C++ interview. </P>
<P>I put together a list of 40 questions that I have had to answer during 
numerous technical interviews in the past few years. You, too, will have to 
answer at least some of them during an interview. Even if you use C++ on a daily 
basis, it pays to go through the questions. Most of us, no matter how 
experienced, use only a segment of the language that we are most comfortable 
with. Brief answers are included, but you can find more information in the <A 
href="http://www.cpuniverse.com/newsite/archives/1999/mar/#sidebar">references</A> 
listed. </P>
<P><B>Q1.</B> <B><I>Is there anything you can do in C++ that you cannot do in 
C?</I></B> </P>
<P><B>A1.</B> No. There is nothing you can do in C++ that you cannot do in C. 
After all you can write a C++ compiler in C. </P>
<P><B>Q2.</B> <B><I>What is the difference between C++ structure and C++ 
class?</I></B> </P>
<P><B>A2.</B> The default access level assigned to members of struct is public 
while the default access level assigned to a class is private. </P>
<P><B>Q3.</B> <B><I>What is encapsulation?</I> </B></P>
<P><B>A3.</B> Encapsulation is welding of code and data together into 
objects.</P>
<P><B>Q4.</B> <B><I>What is inheritance?</I></B> </P>
<P><B>A4.</B> Inheritance is a mechanism through which a subclass inherits the 
properties and behavior of its superclass. </P>
<P><B>Q5. <I>What is polymorphism?</I></B> </P>
<P><B>A5.</B> In Greek this means "many shapes." As a consequence of inheritance 
and virtual functions, a single task (for example, drawing a geometrical shape) 
can be implemented using the same name (like draw()) and implemented differently 
(via virtual functions) as each type in object hierarchy requires(circle.draw() 
or rectangle.draw()). Later, when a polymorphic object (whose type is not known 
at compile time) executes the draw() virtual function, the correct 
implementation is chosen and executed at run time. </P>
<P><B>Q6. <I>What would you say if you saw "delete this" while reviewing your 
peer's code?</I></B> </P>
<P><B>A6.</B> You should never do this. Since compiler does not know whether the 
object was allocated on the stack or on the heap, "delete this" could cause a 
disaster. </P>
<P><B>Q7. <I>What is the difference between public, protected, and private 
members of a class?</I></B> </P>
<P><B>A7.</B> Private members are accessible only by members and friends of the 
class. Protected members are accessible by members and friends of the class and 
by members and friends of derived classes. Public members are accessible by 
everyone. </P>
<P><B>Q8. <I>What is the difference between non-virtual and virtual 
functions?</I></B> </P>
<P><B>A8.</B> The behavior of a non-virtual function is known at compile time 
while the behavior of a virtual function is not known until the run time. </P>
<P><B>Q9. <I>What is a pure virtual function?</I></B> </P>
<P><B>A9.</B> "A pure virtual function is a function declared in a base class 
that has no definition relative to the base."</P>
<P><B>Q10. <I>What is an abstract base class?</I></B> </P>
<P><B>A10.</B> It is a class that has one or more pure virtual functions. </P>
<P><B>Q11. <I>What is the difference between MyClass p; and MyClass 
p();?</I></B> </P>
<P><B>A11.</B> MyClass p; creates an instance of class MyClass by calling a 
constructor for MyClass. MyClass p(); declares function p which takes no 
parameters and returns an object of class MyClass by value. </P>
<P><B>Q12. <I>How do you know that your class needs a virtual 
destructor?</I></B> </P>
<P><B>A12.</B> If your class has at least one virtual function, you should make 
a destructor for this class virtual. This will allow you to delete a dynamic 
object through a pointer to a base class object. If the destructor is 
non-virtual, then wrong destructor will be invoked during deletion of the 
dynamic object. </P>
<P><B>Q13. <I>Why were the templates introduced?</I></B> </P>
<P><B>A13.</B> Many data structures and algorithms can be defined independently 
of the type of data they work with. You can increase the amount of shared code 
by separating data-dependent portions from data-independent portions, and 
templates were introduced to help you do that. </P>
<P><B>Q14. <I>What is a static member of a class?</I></B> </P>
<P><B>A14.</B> Static data members exist once for the entire class, as opposed 
to non-static data members, which exist individually in each instance of a 
class. </P>
<P><B>Q15.</B> <B><I>What feature of C++ would you use if you wanted to design a 
member function that guarantees to leave "thisÓ object unchanged?</I></B> </P>
<P><B>A15.</B> It is "const" as in: "int MyFunc (int test) const;" </P>
<P><B>Q16. <I>Can you overload a function based only on whether a parameter is a 
value or a reference?</I></B> </P>
<P><B>A16.</B> No. Passing by value and by reference looks identical to the 
caller. </P>
<P><B>Q17. <I>What is the difference between function overloading and function 
overriding?</I></B> </P>
<P><B>A17.</B> Overloading is a method that allows defining multiple member 
functions with the same name but different signatures. The compiler will pick 
the correct function based on the signature. Overriding is a method that allows 
the derived class to redefine the behavior of member functions which the derived 
class inherits from a base class. The signatures of both base class member 
function and derived class member function are the same; however, the 
implementation and, therefore, the behavior will differ. </P>
<P><B>Q18. <I>Can derived class override some but not all of a set of overloaded 
virtual member functions inherited from the base class?</I></B> </P>
<P><B>A18.</B> Compiler will allow this, but it is a bad practice since 
overridden member functions will hide all of the inherited overloads from the 
base class. You should really override all of them. </P>
<P><B>Q19. <I>What is the difference between assignment and initialization in 
C++?</I></B> </P>
<P><B>A19.</B> Assignment changes the value of the object that has already been 
constructed. Initialization constructs a new object and gives it a value at the 
same time. </P>
<P><B>Q20. <I>When are copy constructors called?</I></B> </P>
<P><B>A20.</B> Copy constructors are called in three cases: when a function 
returns an object of that class by value, when the object of that class is 
passed by value as an argument to a function, and, finally, when you construct 
an object based on another object of the same class (Circle c1=c2;). </P>
<P><B>Q21. <I>Why do you have to provide your own copy constructor and 
assignment operator for classes with dynamically allocated memory?</I> </B></P>
<P><B>A21.</B> If you don't, the compiler will supply and execute the default 
constructor and the assignment operator, but they will not do the job correctly. 
The default assignment operator does memberwise assignment and the default copy 
constructor does memberwise copy. In both cases you will only assign and 
manipulate pointers to dynamic memory, which will lead to memory leaks and other 
abnormalities. You should write your own assignment operator and copy 
constructor, which would copy the pointer to memory so that each object has its 
own copy. </P>
<P><B>Q22. <I>Does compiler guarantee that initializers will be executed in the 
same order as they appear on the initialization list?</I></B> </P>
<P><B>A22.</B> No. C++ guarantees that base class subobjects and member objects 
will be destroyed in the opposite order from which they were constructed. This 
means that initializers are executed in the order, which supports the 
above-mentioned guarantee. </P>
<P><B>Q23. <I>What is function's signature?</I></B> </P>
<P><B>A23.</B> Function's signature is its name plus the number and types of the 
parameters it accepts.</P>
<P><B>Q24. <I>What does extern "C" int func(int *, Foo) accomplish?</I></B> </P>
<P><B>A24.</B> It will turn off "name mangling" for this function so that one 
can link to code compiled by C compiler. </P>
<P><B>Q25. <I>Why do C++ compilers need name mangling?</I></B> </P>
<P><B>A25.</B> Name mangling is the rule according to which C++ changes 
function's name into function signature before passing that function to a 
linker. This is how the linker differentiates between different functions with 
the same name. </P>
<P><B>Q26. <I>What is the difference between a pointer and a reference?</I></B> 
</P>
<P><B>A26.</B> A reference must always refer to some object and, therefore, must 
always be initialized; pointers do not have such restrictions. A pointer can be 
reassigned to point to different objects while a reference always refers to an 
object with which it was initialized.</P>
<P><B>Q27.</B> <B><I>How can you access the static member of a class?</I></B> 
</P>
<P><B>A27.</B> &lt;ClassName&gt;::&lt;StaticMemberName&gt;. </P>
<P><B>Q28. <I>How are prefix and postfix versions of operator++() 
differentiated?</I> </B></P>
<P><B>A28.</B> The postfix version of operator++() has a dummy parameter of type 
int. The prefix version does not have dummy parameter. </P>
<P><B>Q29. <I>What functions does C++ silently write and call?</I></B> </P>
<P><B>A29.</B> Constructors, destructors, copy constructors, assignment 
operators, and address-of operators. </P>
<P><B>Q30. <I>What is the difference between new/delete and 
malloc/free?</I></B></P>
<P><B>A30.</B> Malloc/free do not know about constructors and destructors. New 
and delete create and destroy objects, while malloc and free allocate and 
deallocate memory. </P>
<P><B>Q31. <I>What is the difference between delete and delete[ ]?</I></B> </P>
<P><B>A31.</B> Delete deletes one object; delete[ ] deletes an array of objects. 
</P>
<P><B>Q32. <I>Name two cases where you MUST use initialization list as opposed 
to assignment in constructors.</I></B> </P>
<P><B>A32.</B> Both non-static const data members and reference data members 
cannot be assigned values; instead, you should use initialization list to 
initialize them. </P>
<P><B>Q33. <I>What is the difference between const char *myPointer and char 
*const myPointer?</I></B> </P>
<P><B>A33.</B> Const char *myPointer is a non constant pointer to constant data; 
while char *const myPointer is a constant pointer to non constant data. </P>
<P><B>Q34. <I>Suppose that objects A, B, and C are instances of class MyClass 
(MyClass A, B, C;). How should you design an assignment operator so that the 
"A=B=C;" statement would be allowed by a compiler but "(A=B)=C;" would not be 
allowed by a compiler?</I> </B></P>
<P><B>A34.</B> Make operator=return a reference to a const object. </P>
<P><B>Q35. <I>Is there any problem with the following: char *a=NULL; char&amp; p 
= *a;?</I> </B></P>
<P><B>A35.</B> The result is undefined. You should never do this. A reference 
must always refer to some object. </P>
<P><B>Q36. <I>Class B is derived from class A. Function f is A's friend. Is f 
B's friend as well?</I></B> </P>
<P><B>A36.</B> No. Friendship cannot be inherited.</P>
<P><B>Q37. <I>What issue do auto_ptr objects address?</I></B> </P>
<P><B>A37.</B> If you use auto_ptr objects you would not have to be concerned 
with heap objects not being deleted even if the exception is thrown. </P>
<P><B>Q38. <I>What happens when a function throws an exception that was not 
specified by an exception specification for this function?</I></B> </P>
<P><B>A38.</B> Unexpected() is called, which, by default, will eventually 
trigger abort(). </P>
<P><B>Q39. <I>Why should you prefer throw/catch mechanism to 
setjmp/longjmp?</I></B> </P>
<P><B>A39.</B> The main problem with longjmp() is that it does not destroy local 
objects properly. </P>
<P><B>Q40. <I>Can you think of a situation where your program would crash 
without reaching the breakpoint which you set at the beginning of 
main()?</I></B></P>
<P><B>A40.</B> C++ allows for dynamic initialization of global variables before 
main() is invoked. It is possible that initialization of global will invoke some 
function. If this function crashes the crash will occur before main() is 
entered. </P>
<P>If you feel comfortable answering these questions, then rest assured that 
your chances of impressing any interviewer are very high. Be prepared to know 
basic computer science concepts such as data structures, search and sort 
algorithms, basic database concepts, etc. The client's needs will determine what 
particular branch of computer science you have to be familiar with, but you 
should always be ready to implement the stock, the queue, and the linked list 
data structures with either C or C++ programming languages. And know how to 
write your own version of strcpy (string copy) in C programming language since 
very often they ask you </P>
<P>to do that. </P></DIV></BODY></HTML>
