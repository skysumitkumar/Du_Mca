  AOP Concepts in a Nutshell
1.Join Point(When):Think of it as a scene in the movie of your program's execution. It's where the action happens!
2.Advice(What): This is the action! it's what happens at a particular scene(Join Point). It's like a plot twist in your program's execution.
3.Aspect(Where-Conceptual):It's the script of your movie.It defines what plot twists (Advice) happen and wheere (Pointcut).
4.Pointcut(Where-Operational): It's the specific scenes(Join Points) where the plot twists (Advice) occur. It's like a bookmark in your script(Aspect).
5.Target Object (Whom): This is the main character. It's the object that experiences the plot twists(Advice).
6.Weaving (How): This is the director's job. It's how the script (Aspect) is turned into a movie. In Spring AOP, this happens at runtime.
7.Proxy(The Double): This is the stunt double in your movie.In Spring AOP, it's the object that is created after applying advice to the target object. It's the one 
                     that takes the hits, performs the stunts, and makes the min character (Target Object) look good.
8.Type of advice (The Genre): This is the genre of your movie.It sets the tone and style of how the plot twists(Advice) will unfold.In Spring AOP ,there are three 
                              types of advice:Before,After,and Around.
                              Before(The Setup): This is the part of the movie where the stage is set before the main event.In Spring AOP,'Before' Advice is executed 
                              before the method execution.
                              After Throwing(The Plot Twist): This is the unexpected turn of events in your movie. In Spring AOP,'After Throwing' advice is executed 
                              when a method exits by throwing an exception.It's like the plot twist that leaves the audience in shock.
                              Around (The Full Story): This is the entire movie, encompassing both the setup and the aftermath. In Spring AOP,'Around advice' is 
                              executed both before and after the method execution,providing the most control the method execution.