<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0050)http://www.ccs.neu.edu/home/will/CPP/dangling.html -->
<HTML><HEAD><TITLE>Dangling pointers</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 5.50.4134.600" name=GENERATOR></HEAD>
<BODY>
<H4>Dangling pointers </H4>
<P>A dangling pointer is a pointer to storage that is no longer allocated. 
Dangling pointers are nasty bugs because they seldom crash the program until 
long after they have been created, which makes them hard to find. Programs that 
create dangling pointers often appear to work on small inputs, but are likely to 
fail on large or complex inputs. 
<P>
<P>As the world's leading example of an object-oriented programming language 
that does not rely on garbage collection, C++ makes it easy to create dangling 
pointers. Here are a few examples of the most popular techniques. </P>
<P><B>Note:</B> These examples use C-style strings because we've been using an 
old version of Gnu C++ whose strings do not conform to the new standard.) 
<P>
<HR>

<P><PRE>    delete [] s1;
    delete [] s2;
    return f (s1, s2);      // s1 and s2 are dangling pointers
</PRE>
<P>This code will probably appear to work unless <CODE>f</CODE> or one of the 
functions that are called during the activation of <CODE>f</CODE> happen to 
allocate heap storage. When the bug does show up, it will probably look like a 
bug in <CODE>f</CODE> or in one of the functions that <CODE>f</CODE> calls. 
<P>
<HR>
<A name=automatic></A>
<P><PRE>typedef Foo_ * Foo;

Foo newFoo (char * x) {
    Foo_ tmp(x);
    return &amp;tmp;
}
</PRE>
<P>This is the classic technique for creating a dangling pointer in C. 
<P>
<HR>
<PRE>typedef char * Foo;

Foo newFoo (char * x) {
    Foo tmp = new char [strlen (x) +1] ;
    strcpy (tmp, x);
    delete [] x;
    return tmp;
}
</PRE>
<P>Here newFoo creates a dangling pointer by deleting the client's C-style 
string. 
<P>
<HR>

<P><PRE>typedef char * Foo;

Foo newFoo (char * s) {
    return s;
}
</PRE>
<P>If <CODE>newFoo</CODE> is supposed to return a <CODE>Foo</CODE> whose 
lifetime is independent of the lifetime of its argument, then a dangling pointer 
will be created when a client deletes the C-style string that was passed to 
<CODE>newFoo</CODE>. The bug might appear to lie in the client code, but 
<CODE>newFoo</CODE> would be the real culprit. 
<P>
<HR>

<P><PRE>class Foo {
  public:
    Foo (char * x) : len(strlen(x)), name(x) { }
  private:
    int len;
    char * name;
};

Foo newFoo (char * s) {
    return Foo(s);
}
</PRE>
<P>Once again, a dangling pointer will be created when a client deletes the 
C-style string that was passed to <CODE>Foo</CODE> or <CODE>newFoo</CODE>. 
<P>
<HR>

<P><PRE>class Foo {
  public:
    Foo (char * x) {
        len = strlen (x);
        name = new char[len + 1];
        strcpy (name, x);
    }
    virtual ~Foo () {
        delete [] name;
    }
  private:
    int len;
    char * name;
};

Foo newFoo (char * s) {
    Foo foo = Foo(s);
    return foo;
}
</PRE>
<P>This code fixes the previous bug by introducing three new bugs. The most 
obvious is that the compiler inserts an implicit call to <CODE>foo.~Foo()</CODE> 
when <CODE>newFoo</CODE> returns. This implicit call deallocates 
<CODE>foo.name</CODE>. Hence the Foo that is returned by <CODE>newFoo</CODE> 
always contains a dangling pointer. 
<P>The other bugs are illustrated by the following client code: 
<P><PRE>    Foo f1 = newFoo ("hi there");
    Foo f2 = f1;
    Foo f3;
    f3 = f2;
</PRE>
<P>Since no copy operator is defined, the compiler will implicitly define a copy 
constructor that makes <CODE>Foo f2 = f1</CODE> roughly equivalent to <PRE>    Foo f2;
    f2.len = f1.len;
    f2.name = f1.name;
</PRE>Thus <CODE>f2.name</CODE> becomes the same pointer as 
<CODE>f1.name</CODE>. 
<P>Similarly, no assignment operator is defined, so the compiler will implicitly 
define an assignment operator that makes <CODE>f3 = f2</CODE> roughly equivalent 
to <PRE>    f3.len = f2.len;
    f3.name = f2.name;
</PRE>Thus each of <CODE>f1</CODE>, <CODE>f2</CODE>, and <CODE>f3</CODE> contain 
exactly the same pointer. When they go out of scope, that pointer will be 
deallocated not once, but three times. 
<P>A storage leak would be created if we were to remove the destructor or to 
remove the call to <CODE>delete</CODE>, so those are not good alternatives. What 
we need is a copy constructor and an overloaded assignment operator. 
<P>
<HR>

<P><PRE>class Foo {
  public:
    Foo (char * x) {
        len = strlen (x);
        name = new char[len + 1];
        strcpy (name, x);
    }
    virtual ~Foo () {
        delete [] name;
    }
    Foo (const Foo &amp; foo);                     // copy constructor
    const Foo &amp; Foo:operator= (const Foo &amp;);   // assignment operator
  private:
    int len;
    char * name;
};

//  copy constructor

Foo::Foo (const Foo &amp; foo) {
    len = foo.len;
    name = new char [foo.len];
    strcpy(name, foo.name);
}

//  assignment operator

const Foo &amp; Foo::operator= (const Foo &amp; rhs) {
    delete [] name;
    name = new char [rhs.len + 1];
    strcpy(name, rhs.name);
    return *this;                              // so x = y = z will work
}

Foo newFoo (char * s) {
    Foo foo = Foo(s);
    return foo;
}
</PRE>
<P>This code still contains a bug. Consider the client code 
<P><PRE>    Foo f1 = newFoo ("hello");
    Foo f2 = newFoo ("goodbye");
    f1 = flag ? f1 : f2;
</PRE>
<P>The assignment represents an implicit call to <CODE>f1.operator=(flag ? f1 : 
f2)</CODE>. Suppose <CODE>flag</CODE> is true, so the value of the right hand 
side of the assignment is a reference to <CODE>f1</CODE>. The code for 
<CODE>f1.operator=</CODE> begins by deleting <CODE>f1.name</CODE>. It then 
passes the dangling pointer <CODE>f1.name</CODE> as both arguments to 
<CODE>strcpy</CODE>. Following the assignment, <CODE>f1</CODE> contains a 
dangling pointer. When <CODE>f1</CODE> goes out of scope, and its destructor is 
called, the <CODE>delete []</CODE> operator will be called on 
<CODE>f1.name</CODE> for the second time. 
<P>The solution for this problem is to make the assignment operator check 
whether <CODE>this</CODE> is equal to the right hand side: 
<P><PRE>const Foo &amp; Foo::operator= (const Foo &amp; rhs) {
    if (this == &amp;rhs) {
        delete [] name;
        name = new char [rhs.len + 1];
        strcpy(name, rhs.name);
    }
    return *this;                              // so x = y = z will work
}
</PRE>
<P>What could be simpler? 
<P>
<HR>

<P>Last updated 2 March 1998. </P></BODY></HTML>
