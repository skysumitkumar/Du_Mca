{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\froman\fcharset0 Times New Roman;}{\f1\fmodern\fcharset0 Courier New;}{\f2\fswiss\fcharset0 Tahoma;}{\f3\fswiss\fcharset0 Verdana;}}
{\colortbl ;\red0\green0\blue0;\red0\green0\blue255;\red192\green192\blue192;\red255\green255\blue255;}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\f0\fs20 Q1 if %6.2d is written in the argument of printf what does it mean?\par
       a)  total 6 places for number out of which 2 are for decimal\par
       b)  6 places for integral part and 2 for decimal.\par
       c)  left justified by 6 places\par
       d)  right justified by 6 places.\par
\par
Q2.if static word is used with extern variables then \par
\pard{\pntext\f0 a)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnlcltr{\pntxta)}}
\fi-360\li660\tx660 variable with same name can\rquote t be used in other file in which extern variable is used.\par
\pard{\pntext\f0 b)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnlcltr{\pntxta)}}
\fi-360\li660\tx660 Variable with same name can be used.\par
\pard{\pntext\f0 c)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnlcltr{\pntxta)}}
\fi-360\li660\tx660 Variable with same name can be used but same memory will be taken as that of extern variable.\par
\pard\li300\par
\pard Q3.Are bool and String data types in c?\par
\pard{\pntext\f0 a)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnlcltr{\pntxta)}}
\fi-360\li900\tx900 only bool\par
\pard{\pntext\f0 b)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnlcltr{\pntxta)}}
\fi-360\li900\tx900 only String\par
\pard{\pntext\f0 c)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnlcltr{\pntxta)}}
\fi-360\li900\tx900 none\par
\pard{\pntext\f0 d)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart4\pnlcltr{\pntxta)}}
\fi-360\li900\tx900 both\par
\pard\li540\par
\pard   Q4.what does strlen returns?\par
\pard{\pntext\f0 a)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnlcltr{\pntxta)}}
\fi-360\li840\tx840 Length of string including terminating character.\par
\pard{\pntext\f0 b)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnlcltr{\pntxta)}}
\fi-360\li840\tx840 Length excluding terminating character\par
\pard{\pntext\f0 c)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnlcltr{\pntxta)}}
\fi-360\li840\tx840 No such function exists\par
\pard\par
 Q5.what is the output of the following program\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 int counter (int i)\par
\{\par
  static int count =0;\par
  count = count +i;\par
  return (count );\par
\}\par
main()\par
\{\par
  int i , j;\par
\par
  for (i=0; i <=5; i++)\par
    j = counter(i);\par
\}\par
\pard\f0 The value of j at the end of the execution of the this program is:\line\line (a) 10\line (b) 15\line (c) 6\line (d) 7\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q6. main()\par
\{\par
  char *p;\par
  char buf[10] =\{ 1,2,3,4,5,6,9,8\};\par
  p = (buf+1)[5];\par
  printf("%d" , p);\par
\}\par
\pard\f0 The output for this program is: \line\line (a) 5\line (b) 6\line (c) 9\line (d) None of the above\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q7. typedef int (*test) ( float * , float*)\par
test tmp;\par
\pard\f0 type of tmp is \line\line (a) Pointer to function of having two arguments that is pointer to float\line (b) int\line (c) Pointer to function having two argument that is pointer to float and return int\line (d) None of the above\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q8. Void f(char**);\par
\par
main()\par
\{\par
  char * argv[] = \{ "ab" ,"cd" , "ef" ,"gh", "ij" ,"kl" \};\par
  f( argv );\par
\}\par
\par
void f( char **p )\par
\{\par
  char* t;\par
\par
  t= (p+= sizeof(int))[-1];\par
\par
  printf( "%s" , t);\par
\}\par
\pard\f0 The output for this program is: \line\line (a) ab\line (b) cd\line (c) ef\line (d) gh\par
\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q9. main()\par
\{\par
  int i=3;\par
  int j;\par
\par
  j = sizeof(++i+ ++i);\par
\par
  printf("i=%d j=%d", i ,j);\par
\}\par
\pard\f0 The output for this program is:\line\line (a) i=4 j=2\line (b) i=3 j=2\line (c) i=3 j=4\line (d) i=3 j=6\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q10. main()\par
\{\par
  int a, b,c, d;\par
  a=3;\par
  b=5;\par
  c=a,b;\par
  d=(a,b);\par
\par
  printf("c=%d" ,c);\par
  printf("d=%d" ,d);\par
\par
\}\par
\pard\f0 The output for this program is:\line\line (a) c=3 d=3\line (b) c=5 d=3\line (c) c=3 d=5\line (d) c=5 d=5\par
\par
Q11.which of the following is the correct output?\par
\par
#include<stdio.h>\par
void main()\par
\{\par
\tab float a=0.7;\par
            if(a<0.7)\par
                 printf(\ldblquote C\rdblquote );\par
\tab else\par
\tab      printf(\ldblquote C++\rdblquote );\par
\pard{\pntext\f0 a)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 C\par
\pard{\pntext\f0 b)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 C++\par
\pard{\pntext\f0 c)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 Error as float can\rquote t be compared\par
\pard{\pntext\f0 d)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart4\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 None\par
\pard\par
Q12. which of the following is the correct output?\par
\par
#include<stdio.h>\par
void main()\par
\{\par
\tab float f=43.20;\par
\tab printf(\ldblquote %e\rdblquote ,f);\par
\tab printf(\ldblquote %f\rdblquote ,f);\par
 \tab printf(\ldblquote %g\rdblquote ,f);\par
\}\par
\par
\pard{\pntext\f0 a)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 4.320000e+01 43.200001 43.2\par
\pard{\pntext\f0 b)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 4.3 43.22 43.21\par
\pard{\pntext\f0 c)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 4.3e 43.20f 43.00\par
\pard{\pntext\f0 d)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart4\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 error\par
\pard\par
Q13.which of the following is the correct output?\par
\par
#include<stdio.h>\par
void main()\par
\{\par
        int i=4,j=-1,k=0,w,x,y,z;\par
        w=i || j || k;\par
        x=i && j && k;\par
        y=i || j && k;\par
        z=i && j || k;\par
        printf(\ldblquote %d%d%d%d\rdblquote ,w,x,y,z);\par
\}\par
\par
\pard{\pntext\f0 A.\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnucltr{\pntxta.}}
\fi-360\li720\tx720 1 1 1 1\par
\pard{\pntext\f0 B.\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnucltr{\pntxta.}}
\fi-360\li720\tx720 1 1 0 1 \par
\pard{\pntext\f0 C.\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnucltr{\pntxta.}}
\fi-360\li720\tx720 1 0 0 1\par
\pard{\pntext\f0 D.\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart4\pnucltr{\pntxta.}}
\fi-360\li720\tx720 0 1 1 1 \par
\pard{\pntext\f0 E.\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart5\pnucltr{\pntxta.}}
\fi-360\li720\tx720 1 0 1 1\par
\pard\par
Q14.which statement is correct?\par
\par
#include<stdio.h>\par
void main()\par
\{\par
\tab printf(\ldblquote %p\rdblquote ,main());\par
\}\par
\par
\pard{\pntext\f0 a)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart1\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 it prints garbage values infinite times\par
\pard{\pntext\f0 b)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart2\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 it runs an infinite loop without printing anything\par
\pard{\pntext\f0 c)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart3\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 an error since main() can\rquote t be called recursively\par
\pard{\pntext\f0 d)\tab}{\*\pn\pnlvlbody\pnf0\pnindent360\pnstart4\pnlcltr{\pntxta)}}
\fi-360\li720\tx720 address opf main() would get printed infinite number of times.\par
\pard\par
Q15.\cf1\f2  int z,x=5,y=-10,a=4,b=2; \line z = x++ - --y * b / a; \line What number will z in the sample code above contain? \line A)  5 \line B)  6 \line C)  10 \line D)  11 \line E)  12\par
\par
Q16. int x = 2 * 3 + 4 * 5; \line What value will x contain in the sample code above? \line A) 22 \line B) 26 \line C) 46 \line D) 50 \line E) 70\par
\par
Q17. C is which kind of language? \line A) Machine \line B)Procedural \line C) Assembly \line D) Object-oriented \line E) Strictly-typed \line\par
\pard\box\brdrdb\brdrw15\brdrcf3\brsp100 \cbpat4\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656 Q18.\f1  int x = 0; \par
for (x=1; x<4; x++); \par
printf("x=%d\\n", x);  \par
\pard\f2\line What will be printed when the sample code above is executed? \par
A) x=0 \line B) x=1 \line C) x=3 \line D)x=4 \line E)x=5\par
\cf0\f0\par
\pard\box\brdrdb\brdrw15\brdrcf3\brsp100 \cbpat4\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q19.\cf1  int x = 3; \par
if( x == 2 );\par
  x = 0; \par
if( x == 3 )\par
 x++; \par
else x += 2;  \par
\pard\f2\line What value will x contain when the sample code above is executed? \line A)1 \line B)2 \line C)3 \line D)4 \line E)5\cf0\f0\par
\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q20. void main() \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\{ \par
   int a=10,b=20; \par
   char x=1,y=0; \par
   if(a,b,x,y) \par
   \{ \par
      printf("EXAM"); \par
   \} \par
\} \par
\pard\f3 What is the output? \line\line 1) XAM is printed \line 2) exam is printed \line 3) Compiler Error \line 4) Nothing is printed\par
Q21. What is the result of 16>>2? \line\line 1) 4 \line 2) 8 \line 3) 3 \line 4) 0\f0\par
\par
Q22.\cf2\f3  \cf0 What is the output of the following code? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 #include<stdio.h>\par
void main()\par
\{\par
   int s=0;\par
   while(s++<10)\par
   \{\par
      if(s<4 && s<9)\par
         continue;\par
      printf("\\n%d\\t",s);\par
   \}\par
\}\par
 \par
\pard\f3 1) 1 2 3 4 5 6 7 8 9 \line 2) 1 2 3 10 \line 3) 4 5 6 7 8 9 10 \line 4) 4 5 6 7 8 9\f0\par
\par
\par
Q23.\f3  What is the output of the following code? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 # include<stdio.h>\par
# define a 10 \par
main() \par
\{ \par
   printf("%d..",a); \par
   foo(); \par
   printf("%d",a); \par
\} \par
void foo() \par
\{ \par
   #undef a \par
   #define a 50 \par
\}\par
 \par
\pard\f3 1) 10..10 \line 2) 10..50 \line 3) Error \line 4) 0\par
\f0\par
\par
Q24.\cf2\f3  \cf0 How can I dynamically allocate a two-dimensional array? \line\line 1) int **array1 = (int **)malloc(nrows * sizeof(int *)); \line for(i = 0; i < nrows; i++)\line array1[i] = (int *)malloc(ncolumns * sizeof(int));\line\line 2) int **array2 = (int **)malloc(nrows * sizeof(int *)); \line array2[0] = (int *)malloc(nrows * ncolumns * sizeof(int));\line for(i = 1; i < nrows; i++)\line array2[i] = array2[0] + i * ncolumns;\line\line 3) int *array3 = (int *)malloc(nrows * ncolumns * sizeof(int));\line\line 4) Any of the above.\f0\par
\par
Q25.\cf2\f3  \cf0 The size of a structure can be determined by \line a. size of variable name \line b. size of (struct tag)\line\line\line 1) Only a \line 2) Only b \line 3) Both a and b \line 4) None of these options\par
\par
Q26.\cf2  \cf0 What will be the value of `a` after the following code is executed \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 #define square(x) x*x\par
a = square(2+3)\par
\pard\f3 1) 25 \line 2) 13 \line 3) 11 \line 4) 10\par
\par
Q27.\cf2  \cf0 What is the result of 16>>2? \line\line 1) 4 \line 2) 8 \line 3) 3 \line 4) 0\par
\par
\pard\box\brdrdb\brdrw15\brdrcf3\brsp100 \cbpat4\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656 Q28.\cf1\f1  short testarray[4][3] = \{ \{1\}, \{2, 3\}, \{4, 5, 6\} \}; \par
 printf( "%d\\n", sizeof( testarray ) );  \par
\pard\f2\line Assuming a short is two bytes long, what will be printed by the above code? \line a) It will not compile because not enough initializers are given. \line b) 6 \line c) 7 \line d) 12 \line e) 24 \par
\par
Q29. char buf [] = "Hello world!"; \line\line char * buf = "Hello world!"; \par
\line In terms of code generation, how do the two definitions of buf, both presented above, differ? \line a) The first definition certainly allows the contents of buf to be safely modified at runtime; the second definition does not. \line b) The first definition is not suitable for usage as an argument to a function call; the second definition is. \line c) The first definition is not legal because it does not indicate the size of the array to be allocated; the second definition is legal. \line d) They do not differ -- they are functionally equivalent. [Ans]\line e) The first definition does not allocate enough space for a terminating NUL-character, nor does it append one; the second definition does.\par
\par
\pard\box\brdrdb\brdrw15\brdrcf3\brsp100 \cbpat4\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656 Q30.\f1  int i = 4; \par
switch (i) \par
\{ \par
   default: \par
      ; \par
   case 3: \par
      i += 5; \par
      if ( i == 8) \par
      \{ \par
         i++; \par
         if (i == 9) break; \par
         i *= 2; \par
      \} \par
      i -= 4; \par
      break; \par
   case 8: \par
      i += 5; \par
      break;\par
\} \par
printf("i = %d\\n", i);  \par
\pard\f2\line What will the output of the sample code above be? \line a) i = 5 \line b) i = 8 \line c) i = 9 \line d) i = 10 \line e) i = 18\par
\par
\cf0\f0 Q31 : evaluate:\par
int func(int v)\par
\{\par
        if( v == 1|| v == 0)\par
              return 1;\par
        if(v%2 == 0)\par
              return func(v /2) + 2;\par
        else\par
              return func(v-1)+3;\par
\}\par
for function call func(7)\par
\par
Ans:\par
\par
\par
Q32: point out the error, if any, in the following function.\par
\par
#include<stdio.h>\par
main()\par
\{\par
      \par
      int b;\par
      b = fun(20);\par
      printf("%d" ,b);\par
      getchar();\par
      \par
\}\par
int fun(int val)\par
\{\par
    val>20?return (10):return (20);\par
\}\par
\par
Ans:\par
\par
\par
Q33: What is the output of following program\par
\par
#include<stdio.h>\par
main()\par
\{\par
      int i = 3, j = 4, k ,l;\par
      k = fun(i,j);\par
      l = fun(i,j);\par
      printf("\\n%d\\t%d", k , l);\par
      getchar();\par
\}\par
int fun(int a , int b)\par
\{\par
    int aa, bb;\par
    aa = a+b;\par
    bb= a*b;\par
    return (aa , bb);\par
\}\par
Ans:\par
\par
\par
Q 34: which of the following is the correct output for the program given below\par
\par
#include<stdio.h>\par
int func();\par
static int i;\par
main()\par
\{\par
      while(i)\par
      \{\par
              func();\par
              main();\par
      \}\par
      printf("hello every one\\n");\par
      getchar();\par
\}\par
int func()\par
\{\par
   printf("Hi");\par
\}\par
\par
a.error: function main can't call itself\par
b.hello every one\par
c.hi\par
d.prints hi infinite times\par
\par
\par
Q35: what will be the output of the following program?\par
\par
#include<stdio.h>\par
main()\par
\{\par
     printf("\\n%%%%%");\par
     getchar();\par
\}\par
\par
Ans:\par
\par
\par
Q 36: Will the following program compile successfully? if yes write its output.\par
\par
#include<stdio.h>\par
# define s "message=  %s"\par
main()\par
\{\par
  printf(s ,"hello" "everyone");\par
  getchar();\par
 \par
\}\par
Ans:\par
\par
\par
Q37: modify the macro such that it outputs:\par
\par
   x= 12 y = 13\par
#include<stdio.h>\par
\par
# define PRINT(int) printf("int = %d" , int);\par
\par
main()\par
\{\par
   int x = 12;\par
   int y = 13;\par
   PRINT(x)\par
   PRINT(y)\par
   getchar();\par
\}\par
Ans:\par
\par
Q38: trying to define a few simple little function-like macros such as \par
\tab #define square(x) x * x\par
but it is not always working. Correct the macro.\par
Ans:\par
\par
\par
Q39: what will be the output of the following program?\par
\par
#include<stdio.h>\par
#define FUN(i,j) i##j\par
\par
main()\par
\{\par
  int value1 = 25;\par
  int value2 = 20;\par
  printf("%d" ,FUN(value1 , 2));\par
  getchar();\par
\}\par
A  10\par
B   25\par
C  2520 \par
D  20\par
\par
Q40: Write a general swap macro in C :\par
\par
  - A macro which can swap any type of data (ie.  int, char,\par
\tab float, struct, etc..)\par
ANS:\par
\par
\par
Q41: what will be the output of the following program?\par
#include<stdio.h>\par
\par
main()\par
\{\par
  int a=3, b = 5;\par
\par
  printf(&a["Ya!Hello! how is this? %s\\n"], &b["junk/super"]);\par
  printf(&a["WHAT%c%c%c  %c%c  %c !\\n"], 1["this"],\par
\tab  2["beauty"],0["tool"],0["is"],3["sensitive"],4["CCCCCC"]);\par
\}\par
Ans:\par
\par
\par
Q42:  what will be the output of the following program?\par
#include<stdio.h>\par
#define MESS junk\par
main()\par
\{\par
   printf("MESS");\par
\}\par
\par
ans:\par
\par
\par
Q43 What's the difference between \par
\tab const MAXSIZE = 100;\par
and\par
\tab #define MAXSIZE 100\par
ANS:\par
\par
\par
Q44 : Write the output of this program?\par
\par
#include <stdio.h>\par
#define calc(a, b)   (a * b) / (a - b)\par
\par
void main()\par
\{\par
\tab int a = 20, b = 10;\par
\par
\tab printf("%d\\n", calc(a + 4, b -2));\par
\}\par
ans:\par
\par
Q45 what will be the program result in?\par
\par
#include <stdio.h>\par
void fn(int, int);\par
main()\par
\{\par
\tab int \tab a = 5;\par
\par
\tab printf("Main :  %d %d\\n", a++, ++a);\par
\tab fn(a, a++);\par
\}\par
\par
void fn(int a, int b)\par
\{\par
\tab printf("Fn : a = %d \\t b = %d\\n", a, b);\par
\}\par
\par
Ans:\par
\par
\par
Q46: what will be the program result in?\par
\par
#include <stdio.h>\par
void fn(int);\par
static int  val = 5;\par
\par
main()\par
\{\par
\tab while (val --) fn(val);\par
\tab printf("%d\\n", val);\par
\}\par
\par
void fn(int val)\par
\{\par
\tab static int val = 0;\par
\par
\tab for (; val < 5; val ++) printf("%d\\n", val);\par
\}\par
\par
Ans:\par
\par
\par
Q47: what will be the program result in?\par
\par
char *foo()\par
\{\par
char result[100];\par
strcpy(result,"anything is good");\par
return(result);\par
\}\par
\par
void main()\par
\{\par
char *j;\par
j=foo()\par
printf("%s",j);\par
getchar();\par
\}\par
\par
Ans:\par
\par
\par
Q48: what will be the program result in?\par
\par
#include<stdio.h>\par
int main()\par
\{\par
  \par
    printf("%d" , printf("hello\\n"));\par
    getchar();\par
\}\par
\par
ans:\par
\par
\par
Q49:what will be the program result in?\par
\par
#include<stdio.h>\par
main()\par
\{\par
static i=3;\par
printf("%d",i--);\par
return i>0 ? main():0;\par
\par
\}\par
\par
Ans:\par
\par
\par
Q50: what will be the program result in?\par
\par
#include<stdio.h>\par
#define MAX(x,y) (x)>(y)?(x):(y) \par
 \par
main()\par
\{\par
      int i=10;\par
      int j ,k;\par
      j=5;\par
      k=0;\par
      k=MAX(i++ ,++j);\par
      printf("%d %d %d %d", i ,j ,k);\par
      getchar();\par
 \}\par
\par
ans:\par
\par
\par
Q51: what will be the output of the following program?\par
\par
#include<stdio.h>\par
main()\par
\{\par
     char * p;\par
     p = "%d\\n";\par
     p++;\par
     p++;\par
     printf( p-2 ,23);\par
     getchar();\par
\par
\}\par
\par
Ans:\par
\par
\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 Q52.  #include<stdio.h>\par
\par
  #define TOTAL_ELEMENTS (\b sizeof\b0 (array) \b /\b0  \b sizeof\b0 (array[0]))\par
  \b int\b0  array[] \b =\b0  \{23,34,12,17,204,99,16\};\line\par
  \b int\b0  main()\line   \{\line       \b int\b0  d;\line\par
      \b for\b0 (d\b =-\b0 1;d \b <=\b0  (TOTAL_ELEMENTS\b -\b0 2);d\b ++\b0 )\line           printf("%d\\n",array[d\b +\b0 1]);\line\par
      \b return\b0  0;\line   \}\par
\pard\f0  \par
\par
Q53. What would be the output of the following C program? (Is it a valid C program?) \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1 #include <stdio.h>\par
\b int\b0  main()\par
\{\par
        \b int\b0  i\b =\b0 43;\par
        printf("%d\\n",printf("%d",printf("%d",i)));\par
        \b return\b0  0;\par
\}\par
\par
\pard\f0 Q54. What's the output of the following program ? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1   #include <stdio.h>\par
  \b int\b0  main()\line   \{\line    \b float\b0  a \b =\b0  12.5;\line    printf("%d\\n", a);\line    printf("%d\\n", \b *\b0 (\b int\b0  \b *\b0 )\b &\b0 a);\line    \b return\b0  0;\line   \}\par
\par
\pard\f0 Q55. What is the output of the following program? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1   #define SIZE 10\par
  \b void\b0  size(\b int\b0  arr[SIZE])\line   \{\line           printf("size of array is:%d\\n",\b sizeof\b0 (arr));\line   \}\line\par
  \b int\b0  main()\line   \{\line           \b int\b0  arr[SIZE];\line           size(arr);\line           \b return\b0  0;\line   \}\par
\par
\pard Q56. \f0 What is the output of the following program? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1   #include <stdio.h>\par
  \b int\b0  main()\line   \{\line       \b int\b0  i;\line       i \b =\b0  10;\line       printf("i : %d\\n",i);\line       printf("sizeof(i++) is: %d\\n",\b sizeof\b0 (i\b ++\b0 ));\line       printf("i : %d\\n",i);\line       \b return\b0  0;\line   \}\par
\par
\pard Q57. \f0 Why does the following program give a warning? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1   #include <stdio.h>\par
  \b void\b0  foo(\b const\b0  \b char\b0  \b **\b0 p) \{ \}\line   \b int\b0  main(\b int\b0  argc, \b char\b0  \b **\b0 argv)\line   \{\line           foo(argv);\line           \b return\b0  0;\line   \}\par
\par
\pard Q58. \f0 The following is a piece of code which implements the reverse Polish Calculator. There is a(are) serious(s) bug in the code. Find it(them) out!!! Assume that the function getop returns the appropriate return values for operands, opcodes, EOF etc.. \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1   #include <stdio.h>\par
  #include <stdlib.h>\par
\par
  #define MAX 80\par
  #define NUMBER '0'\par
\par
  \b int\b0  getop(\b char\b0 []);\line   \b void\b0  push(\b double\b0 );\line   \b double\b0  pop(\b void\b0 );\line   \b int\b0  main()\line   \{\line       \b int\b0  type;\line       \b char\b0  s[MAX];\line\par
      \b while\b0 ((type \b =\b0  getop(s)) \b !=\b0  EOF)\line       \{\line           \b switch\b0 (type)\line           \{\line               \b case\b0  NUMBER:\line                   push(atof(s));\line                   \b break\b0 ;\line               \b case\b0  '+':\line                   push(pop() \b +\b0  pop());\line                   \b break\b0 ;\line               \b case\b0  '*':\line                   push(pop() \b *\b0  pop());\line                   \b break\b0 ;\line               \b case\b0  '-':\line                   push(pop() \b -\b0  pop());\line                   \b break\b0 ;\line               \b case\b0  '/':\line                   push(pop() \b /\b0  pop());\line                   \b break\b0 ;\line               /*   ... \par
               *   ...    \par
               *   ... \par
               */\par
          \}\line       \}\line   \}\par
\par
\pard\cbpat2\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656 Q59. #include <stdio.h>\par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656   \b int\b0  gcd(\b int\b0  u,\b int\b0  v)\line   \{\line       \b int\b0  t;\line       \b while\b0 (v \b >\b0  0)\line       \{\line           \b if\b0 (u \b >\b0  v)\line           \{\line               t \b =\b0  u;\line               u \b =\b0  v;\line               v \b =\b0  t;\line           \}\line           v \b =\b0  v\b -\b0 u;\line       \}\line       \b return\b0  u;\line   \}\line\par
  \b int\b0  main()\line   \{\line       \b int\b0  x,y;\line       printf("Enter x y to find their gcd:");\line       \b while\b0 (scanf("%d%d",\b &\b0 x, \b &\b0 y) \b !=\b0  EOF)\line       \{\line           \b if\b0 (x \b >\b0 0 \b &&\b0  y\b >\b0 0)\line               printf("%d %d %d\\n",x,y,gcd(x,y));\line                   printf("Enter x y to find their gcd:");\line       \}\line       printf("\\n");\line       \b return\b0  0;\line   \}\line\par
\f0\fs24 Implement a C function similar to the above to find the \b GCD of 4 integers.\b0\f1\fs20\par
\pard\f0\par
Q60. \fs24 The following is a simple C program which tries to multiply an integer by 5 using the bitwise operations. But it doesn't do so. Explain the reason for the wrong behaviour of the program. \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20   #include <stdio.h>\par
  #define PrintInt(expr) printf("%s : %d\\n",#expr,(expr))\par
  \b int\b0  FiveTimes(\b int\b0  a)\line   \{\line       \b int\b0  t;\line       t \b =\b0  a\b <<\b0 2 \b +\b0  a;\line       \b return\b0  t;\line   \}\line\par
  \b int\b0  main()\line   \{\line       \b int\b0  a \b =\b0  1, b \b =\b0  2,c \b =\b0  3;\line       PrintInt(FiveTimes(a));\line       PrintInt(FiveTimes(b));\line       PrintInt(FiveTimes(c));\line       \b return\b0  0;\line   \}\par
\pard\tx2748\f0\tab\par
\pard\fs24 Q61. The following is a piece of C code, whose intention was to print a minus sign 20 times. But you can notice that, it doesn't work. \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20   #include <stdio.h>\par
  \b int\b0  main()\line   \{\line       \b int\b0  i;\line       \b int\b0  n \b =\b0  20;\line       \b for\b0 ( i \b =\b0  0; i \b <\b0  n; i\b --\b0  )\line           printf("-");\line       \b return\b0  0;\line   \}\par
\pard\f0\fs24 Well fixing the above code is straight-forward. To make the problem interesting, you have to fix the above code, by changing exactly \b one\b0  character. There are three known solutions. See if you can get all those three.\fs20\par
\par
\pard\sb100\sa100 Q62. \fs24 How can I define a pair of mutually referential structures? I tried \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20\tab typedef struct \{\par
\tab\tab int afield;\par
\tab\tab BPTR bpointer;\par
\tab\} *APTR;\par
\par
\tab typedef struct \{\par
\tab\tab int bfield;\par
\tab\tab APTR apointer;\par
\tab\} *BPTR;\par
\pard\f0\fs24 but the compiler doesn't know about \f1\fs20 BPTR\f0\fs24  when it is used in the first structure declaration.\par
\par
\pard\sb100\sa100 Q63. What's the difference between these two declarations? \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20\tab struct x1 \{ ... \};\par
\tab typedef struct \{ ... \} x2;\par
\pard\f0\par
Q64. \fs24 What's the difference between \f1\fs20 const\~char\~*p\f0\fs24 , \f1\fs20 char\~const\~*p\f0\fs24 , and \f1\fs20 char\~*\~const\~p\f0\fs24 ?\par
\par
\pard\sb100\sa100 Q65. I came across some structure declarations with colons and numbers next to certain fields, like this: \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20 struct record \{\par
\tab char *name;\par
\tab int refcount : 4;\par
\tab unsigned dirty : 1;\par
\};\par
\pard\f0\fs24 What is this?\fs20\par
\par
\pard\sb100\sa100 Q66. \fs24 I came across some code that declared a structure like this: \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20 struct name \{\par
\tab int namelen;\par
\tab char namestr[1];\par
\};\par
\pard\f0\fs24 and then did some tricky allocation to make the \f1\fs20 namestr\f0\fs24  array act like it had several elements, with the number recorded by \f1\fs20 namelen\f0\fs24 . How does this work? Is it legal or portable?\par
\par
\pard\sb100\sa100 Q67. Why does this code: \par
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\f1\fs20 char\~*p\~=\~"hello,\~world!";\par
p[0]\~=\~'H';\par
\pard\f0\fs24 crash?\fs20\par
\par
\par
\par
Q68. How will you access the adderss of a register variable?\par
Q69. What is 28884%5, 28884%-5, -28884%5, -28884%-5\par
Q70. What is the difference in using 'continue' in a for loop & a while loop?\par
Q71. What are entry controlled and exit controlled loops?\par
Q72. How will you distinguish between the declaration & definition of a function?\par
Q73. How will you distinguish between the declaration & definition of a variable? 2\par
Q74. What is the difference between internal static variables & external static variables?\par
Q75. What type of initializers are used for i) external & static variables? ii) register and automatic variables?\par
Q76.  find the product of digits of an integer(assume +ve input).\par
Assume following code: int x=1; int *p=&x;\par
then x++ is equi to (*p)++ and not *p++. Why?\par
}
 