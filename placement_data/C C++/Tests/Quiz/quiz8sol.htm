<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0068)http://www.cs.uiuc.edu/class/fa05/cs400/_quiz/_quizsol/quiz8sol.html -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="MSHTML 6.00.5730.11" name=GENERATOR></HEAD>
<BODY><PRE></PRE><STRONG>Question 0 :</STRONG> <PRE>What are the indices of the left and right children of a node i in the
array representation of a heap?

	a) i+1, i+2
	b) 2i, 2i+1
	c) i*i, i*i+1
	d) none of the above

<EM>Answer:</EM>
   b
</PRE><STRONG>Question 1 :</STRONG> <PRE>If a priority queue were implemented with a sorted linked list, what
would be the running time of Insert?

	a) O(1)
	b) O(n * n)
	c) O(log n)
	d) O(n)

<EM>Answer:</EM>
   d
</PRE><STRONG>Question 2 :</STRONG> <PRE>If a priority queue were implemented with a sorted linked list, what
would be the running time of DeleteMin?

	a) O(1)
	b) O(n * n) 
	c) O(log n)
	d) O(n)

<EM>Answer:</EM>
   a
</PRE><STRONG>Question 3 :</STRONG> <PRE>Which statement is NOT true about a heap?

	a) a heap is a partially-ordered complete tree
	b) In a max_heap, a grandparent is always greater than 
             its grandchildren
	c) In a min_heap, the value of every level n node is always 
            smaller than that of every level n+1 node. 
	d) Index of the root is 1
<EM>Answer:</EM>
   c
</PRE><STRONG>Question 4 :</STRONG> <PRE>A node in a heap of n nodes has index i, where 2*i=n. Which of the 
following about the node is definitely correct?

	a) the height of the node is (lg n)/2
	b) the node is a leaf node
	c) the node have one child
	d) the node have two children
<EM>Answer:</EM>
   c
</PRE><STRONG>Question 5 :</STRONG> <PRE>which of the following is NOT improved when we use heaps instead of 
AVL tree to implement priority queue?

	a) Memory usage 
	b) the order of growth of the running time of FindMin() 
	c) the order of growth of the running time of DeleteMin()
	d) all of the above are improved

<EM>Answer:</EM>
   c
</PRE><STRONG>Question 6 :</STRONG> <PRE>   Which of the following properties is not necessary for a relation
     to be considered an equivalence relation?

        a)  ordered
        b)  reflexive
        c)  symmetric
        d)  transitive
<EM>Answer:</EM>
   a
</PRE><STRONG>Question 7 :</STRONG> <PRE>What is the worst case running time for a single Find operation, using
the uptree implementation with smart union and path compression?

	a) O(1)
	b) O(log* n) (log* = "log star")
	c) O(log n)
	d) O(n)

<EM>Answer:</EM>
   c
</PRE><STRONG>Question 8 :</STRONG> <PRE>What is the maximum depth of an uptree node after it has been found
with Find?  Assume that the uptree implements union by size and path
compression.

	a) O(1)
	b) O(log* n) (log* = "log star")
	c) O(log n)
	d) O(n)

<EM>Answer:</EM>
    a
</PRE><STRONG>Question 9 :</STRONG> <PRE>   Consider a simple disjoint sets implementation (ie, arbitary union and
    no path compression).  Given the following disjoint sets in uptree
    implementation, what is the corresponding array in the array 
    implementation?

           7       4        6
           |\      |       
           3 2     5       
             |             
             1             

     -----------------------------      -----------------------------
  a) | 2 | 7 | 7 | 0 | 4 | 0 | 0 |   b) | 6 | 0 | 0 | 2 | 3 | 2 | 0 |
     -----------------------------      -----------------------------
       1   2   3   4   5   6   7          1   2   3   4   5   6   7

     -------------------------------      --------------------------------
  c) | 6 | -2 | -1 | 2 | 3 | 2 | 0 |   d) | 6 | -4 | -2 | 2 | 3 | 2 | -1 |
     -------------------------------      --------------------------------
       1    2    3   4   5   6   7          1    2    3   4   5   6    7
<EM>Answer:</EM>
    a
</PRE><STRONG>Question 10 :</STRONG> <PRE>   Consider a disjoint sets implementation of union-by-size with
    path compression.  Given the following disjoint sets, what is
    the corresponding array?
                1             2
                | \           | \
                4  6          3  5
                                 |
                                 7
     -----------------------------      -------------------------------
  a) | 0 | 0 | 1 | 2 | 1 | 2 | 1 |   b) | -3 | -4 | 2 | 1 | 2 | 1 | 5 |
     -----------------------------      -------------------------------
      1    2    3   4   5   6   7          1    2   3   4   5   6   7

     -------------------------------      -------------------------------
  c) | -4 | -3 | 1 | 2 | 1 | 2 | 1 |   d) | -2 | -3 | 2 | 1 | 2 | 1 | 5 |
     -------------------------------      -------------------------------
       1    2    3   4   5   6   7          1    2    3   4   5   6    7
<EM>Answer:</EM>
    b
</PRE><STRONG>Question 11 :</STRONG> <PRE>   Consider a disjoint sets implementation that does union-by-size
    with path compression.  Given the following disjoint sets, what
    will be the result of performing SetUnion(9,7)?

            1        4        5
            | \      |        |
            2  3     8        6
            |                 |
            9                 7

    a) 4   5         b) 1      4   c) 4     5           d)      1
       |   | \          | \    |      |   / | \     	    ___/ \___
       8   6  1         2  5   8      8  6  7  1    	   /  /   \  \
           |  | \       |  |                   | \  	  2  3    9  5
           7  2  3      3  6                   2  3 		    / \
              |         |  |                   |    		    6  7
              9         9  7                   9    
<EM>Answer:</EM>
    d
</PRE></BODY></HTML>
