<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://www.placementpapers.com/Dharma/Dharma1.htm -->
<HTML><HEAD><TITLE>Dharma Sample Test Paper For Campus Recruitment</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META 
content="Dharma Systems dharma paper placement papers campus recruitments interview Placement Papers Campus Recruitments recruitment india companies job career preparation engineering question paper jobs test campussing Recruitment India tests" 
name=keywords>
<META 
content="A guide to question papers asked by companies during placements and recruitment across various Indian college campuses Companies like Infosys Wipro TCS Hughes IBM HCL Siemens are listed here" 
name=description>
<META content=AVAAVA name=author>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY bgColor=#cccc99>
<DIV align=center>
<CENTER>
<TABLE border=0 width="100%">
  <TBODY>
  <TR>
    <TD width="50%"><A name=top><FONT size=5><U>Dharma Sample Test 
      Paper</U></FONT></A></TD>
    <TD width="50%">
      <P align=right><A href="http://www.placementpapers.com/index.html" 
      title="Back to home page">Home</A></P></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=right><A 
href="http://www.placementpapers.com/Dharma/Dharma.htm#test">Back To Dharma 
Page</A></P>
<P align=right>&nbsp;</P>
<P><EM><STRONG>Give the output of the programs in each case unless mentioned 
otherwise</STRONG></EM></P>
<P>1.<BR>void main()<BR>{<BR>int d=5;<BR>printf("%f",d);<BR>}</P>
<P><FONT color=#800000>Ans: Undefined</FONT></P>
<P><BR>2.<BR>void main()<BR>{<BR>int 
i;<BR>for(i=1;i&lt;4,i++)<BR>switch(i)<BR>case 1: 
printf("%d",i);break;<BR>{<BR>case 2:printf("%d",i);break;<BR>case 
3:printf("%d",i);break;<BR>}<BR>switch(i) case 4:printf("%d",i);<BR>}</P>
<P><FONT color=#800000>Ans: 1,2,3,4 </FONT></P>
<P><BR>3.<BR>void main()<BR>{<BR>char 
*s="\12345s\n";<BR>printf("%d",sizeof(s));<BR>}</P>
<P><FONT color=#800000>Ans: 6</FONT></P>
<P><BR>4. <BR>void main()<BR>{<BR>unsigned i=1; /* unsigned char k= -1 =&gt; 
k=255; */<BR>signed j=-1; /* char k= -1 =&gt; k=65535 */<BR>/* unsigned or 
signed int k= -1 =&gt;k=65535 
*/<BR>if(i&lt;j)<BR>printf("less");<BR>else<BR>if(i&gt;j)<BR>printf("greater");<BR>else<BR>if(i==j)<BR>printf("equal");<BR>}</P>
<P><FONT color=#800000>Ans: less</FONT></P>
<P><BR>5.<BR>void main()<BR>{<BR>float 
j;<BR>j=1000*1000;<BR>printf("%f",j);<BR>}<BR><BR>1. 1000000<BR>2. 
Overflow<BR>3. Error<BR>4. None </P>
<P><FONT color=#800000>Ans: 4 </FONT></P>
<P><BR>6.&nbsp; How do you declare an array of N pointers to functions 
returning<BR>&nbsp;&nbsp;&nbsp;&nbsp; pointers to functions returning pointers 
to characters?<BR><BR><FONT color=#800000>Ans: The first part of this question 
can be answered in at least<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; three 
ways:<BR><BR>&nbsp;&nbsp;&nbsp; 1. char 
*(*(*a[N])())();<BR><BR>&nbsp;&nbsp;&nbsp; 2. Build the declaration up 
incrementally, using typedefs:<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
typedef char *pc;&nbsp;&nbsp;&nbsp; /* pointer to char 
*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedef pc 
fpc();&nbsp;&nbsp;&nbsp; /* function returning pointer to char 
*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedef fpc 
*pfpc;&nbsp;&nbsp;&nbsp; /* pointer to above 
*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedef pfpc 
fpfpc();&nbsp;&nbsp;&nbsp; /* function returning... 
*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedef fpfpc 
*pfpfpc;&nbsp;&nbsp;&nbsp; /* pointer to... 
*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pfpfpc a[N]; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* array of... 
*/<BR><BR>&nbsp;&nbsp;&nbsp; 3. Use the cdecl program, which turns English into 
C and vice<BR>&nbsp;&nbsp;&nbsp; 
versa:<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cdecl&gt; declare a as 
array of pointer to function 
returning<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
pointer to function returning pointer to 
char<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char 
*(*(*a[])())()<BR><BR>&nbsp;&nbsp;&nbsp; cdecl can also explain complicated 
declarations, help with<BR>&nbsp;&nbsp;&nbsp; casts, and indicate which set of 
parentheses the arguments<BR>&nbsp;&nbsp;&nbsp; go in (for complicated function 
definitions, like the one<BR>&nbsp;&nbsp;&nbsp; above). <BR>&nbsp;&nbsp;&nbsp; 
Any good book on C should explain how to read these 
complicated<BR>&nbsp;&nbsp;&nbsp; C declarations "inside out" to understand them 
("declaration<BR>&nbsp;&nbsp;&nbsp; mimics use").<BR>&nbsp;&nbsp;&nbsp; The 
pointer-to-function declarations in the examples above 
have<BR>&nbsp;&nbsp;&nbsp; not included parameter type information. When the 
parameters<BR>&nbsp;&nbsp;&nbsp; have complicated types, declarations can 
*really* get messy.<BR>&nbsp;&nbsp;&nbsp; (Modern versions of cdecl can help 
here, too.)<BR></FONT><BR><BR>7. A structure pointer is defined of the type time 
. With 3 fields min,sec hours having pointers to 
intergers.<BR>&nbsp;&nbsp;&nbsp; Write the way to initialize the 2nd element to 
10.</P>
<P><BR>8. In the above question an array of pointers is 
declared.<BR>&nbsp;&nbsp;&nbsp; Write the statement to initialize the 3rd 
element of the 2 element to 10;</P>
<P><BR>9.<BR>int f()<BR>void 
main()<BR>{<BR>f(1);<BR>f(1,2);<BR>f(1,2,3);<BR>}<BR>f(int i,int j,int 
k)<BR>{<BR>printf("%d %d %d",i,j,k);<BR>}<BR><BR>What are the number of syntax 
errors in the above? <BR><BR><FONT color=#800000>Ans: None.</FONT></P>
<P><BR>10. <BR>void main()<BR>{<BR>int 
i=7;<BR>printf("%d",i++*i++);<BR>}<BR><BR><FONT color=#800000>Ans: 56</FONT></P>
<P><BR>11. <BR>#define one 0<BR>#ifdef one <BR>printf("one is defined 
");<BR>#ifndef one<BR>printf("one is not defined ");<BR><BR><FONT 
color=#800000>Ans: "one is defined"</FONT><BR><BR><BR>12.<BR>void 
main()<BR>{<BR>int 
count=10,*temp,sum=0;<BR>temp=&amp;count;<BR>*temp=20;<BR>temp=&amp;sum;<BR>*temp=count;<BR>printf("%d 
%d %d ",count,*temp,sum);<BR>}<BR><BR><FONT color=#800000>Ans: 20 20 
20</FONT><BR><BR><BR>13. There was question in c working only on unix machine 
with pattern matching.<BR><BR><BR>14. what is alloca()</P>
<P><FONT color=#800000>Ans : It allocates and frees memory after use/after 
getting out of scope</FONT></P>
<P><BR>15. <BR>main()<BR>{<BR>static i=3;<BR>printf("%d",i--);<BR>return i&gt;0 
? main():0;<BR>}<BR><BR><FONT color=#800000>Ans: 321</FONT></P>
<P><BR>16. <BR>char *foo()<BR>{<BR>char result[100]);<BR>strcpy(result,"anything 
is good");<BR>return(result);<BR>}<BR>void main()<BR>{<BR>char 
*j;<BR>j=foo()<BR>printf("%s",j);<BR>}<BR><BR><FONT color=#800000>Ans: anything 
is good.</FONT></P>
<P><BR>17.<BR>void main()<BR>{<BR>char *s[]={ 
"dharma","hewlett-packard","siemens","ibm"};<BR>char 
**p;<BR>p=s;<BR>printf("%s",++*p);<BR>printf("%s",*p++);<BR>printf("%s",++*p);<BR>}</P>
<P><FONT color=#800000>Ans: "harma" (p-&gt;add(dharma) &amp;&amp; 
(*p)-&gt;harma)<BR>"harma" (after printing, p-&gt;add(hewlett-packard) 
&amp;&amp;(*p)-&gt;harma)<BR>"ewlett-packard" </FONT><BR><BR></P>
<P align=center><A 
href="http://www.placementpapers.com/Dharma/Dharma1.htm#top">Back to 
top</A></P></BODY></HTML>
